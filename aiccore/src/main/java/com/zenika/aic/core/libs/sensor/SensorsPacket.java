// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensors_packet.proto

package com.zenika.aic.core.libs.sensor;

public final class SensorsPacket {
  private SensorsPacket() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class sensors_packet extends
      com.google.protobuf.GeneratedMessage {
    // Use sensors_packet.newBuilder() to construct.
    private sensors_packet() {
      initFields();
    }
    private sensors_packet(boolean noInit) {}
    
    private static final sensors_packet defaultInstance;
    public static sensors_packet getDefaultInstance() {
      return defaultInstance;
    }
    
    public sensors_packet getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SensorsPacket.internal_static_sensors_packet_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SensorsPacket.internal_static_sensors_packet_fieldAccessorTable;
    }
    
    public static final class SensorAccelerometerPayload extends
        com.google.protobuf.GeneratedMessage {
      // Use SensorAccelerometerPayload.newBuilder() to construct.
      private SensorAccelerometerPayload() {
        initFields();
      }
      private SensorAccelerometerPayload(boolean noInit) {}
      
      private static final SensorAccelerometerPayload defaultInstance;
      public static SensorAccelerometerPayload getDefaultInstance() {
        return defaultInstance;
      }
      
      public SensorAccelerometerPayload getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SensorsPacket.internal_static_sensors_packet_SensorAccelerometerPayload_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SensorsPacket.internal_static_sensors_packet_SensorAccelerometerPayload_fieldAccessorTable;
      }
      
      // optional double x = 1;
      public static final int X_FIELD_NUMBER = 1;
      private boolean hasX;
      private double x_ = 0D;
      public boolean hasX() { return hasX; }
      public double getX() { return x_; }
      
      // optional double y = 2;
      public static final int Y_FIELD_NUMBER = 2;
      private boolean hasY;
      private double y_ = 0D;
      public boolean hasY() { return hasY; }
      public double getY() { return y_; }
      
      // optional double z = 3;
      public static final int Z_FIELD_NUMBER = 3;
      private boolean hasZ;
      private double z_ = 0D;
      public boolean hasZ() { return hasZ; }
      public double getZ() { return z_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasX()) {
          output.writeDouble(1, getX());
        }
        if (hasY()) {
          output.writeDouble(2, getY());
        }
        if (hasZ()) {
          output.writeDouble(3, getZ());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasX()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, getX());
        }
        if (hasY()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, getY());
        }
        if (hasZ()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, getZ());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static SensorsPacket.sensors_packet.SensorAccelerometerPayload parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorAccelerometerPayload parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorAccelerometerPayload parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorAccelerometerPayload parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorAccelerometerPayload parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorAccelerometerPayload parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorAccelerometerPayload parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorAccelerometerPayload parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorAccelerometerPayload parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorAccelerometerPayload parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(SensorsPacket.sensors_packet.SensorAccelerometerPayload prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private SensorsPacket.sensors_packet.SensorAccelerometerPayload result;
        
        // Construct using SensorsPacket.sensors_packet.SensorAccelerometerPayload.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new SensorsPacket.sensors_packet.SensorAccelerometerPayload();
          return builder;
        }
        
        protected SensorsPacket.sensors_packet.SensorAccelerometerPayload internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new SensorsPacket.sensors_packet.SensorAccelerometerPayload();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SensorsPacket.sensors_packet.SensorAccelerometerPayload.getDescriptor();
        }
        
        public SensorsPacket.sensors_packet.SensorAccelerometerPayload getDefaultInstanceForType() {
          return SensorsPacket.sensors_packet.SensorAccelerometerPayload.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public SensorsPacket.sensors_packet.SensorAccelerometerPayload build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private SensorsPacket.sensors_packet.SensorAccelerometerPayload buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public SensorsPacket.sensors_packet.SensorAccelerometerPayload buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          SensorsPacket.sensors_packet.SensorAccelerometerPayload returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SensorsPacket.sensors_packet.SensorAccelerometerPayload) {
            return mergeFrom((SensorsPacket.sensors_packet.SensorAccelerometerPayload)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(SensorsPacket.sensors_packet.SensorAccelerometerPayload other) {
          if (other == SensorsPacket.sensors_packet.SensorAccelerometerPayload.getDefaultInstance()) return this;
          if (other.hasX()) {
            setX(other.getX());
          }
          if (other.hasY()) {
            setY(other.getY());
          }
          if (other.hasZ()) {
            setZ(other.getZ());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 9: {
                setX(input.readDouble());
                break;
              }
              case 17: {
                setY(input.readDouble());
                break;
              }
              case 25: {
                setZ(input.readDouble());
                break;
              }
            }
          }
        }
        
        
        // optional double x = 1;
        public boolean hasX() {
          return result.hasX();
        }
        public double getX() {
          return result.getX();
        }
        public Builder setX(double value) {
          result.hasX = true;
          result.x_ = value;
          return this;
        }
        public Builder clearX() {
          result.hasX = false;
          result.x_ = 0D;
          return this;
        }
        
        // optional double y = 2;
        public boolean hasY() {
          return result.hasY();
        }
        public double getY() {
          return result.getY();
        }
        public Builder setY(double value) {
          result.hasY = true;
          result.y_ = value;
          return this;
        }
        public Builder clearY() {
          result.hasY = false;
          result.y_ = 0D;
          return this;
        }
        
        // optional double z = 3;
        public boolean hasZ() {
          return result.hasZ();
        }
        public double getZ() {
          return result.getZ();
        }
        public Builder setZ(double value) {
          result.hasZ = true;
          result.z_ = value;
          return this;
        }
        public Builder clearZ() {
          result.hasZ = false;
          result.z_ = 0D;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:sensors_packet.SensorAccelerometerPayload)
      }
      
      static {
        defaultInstance = new SensorAccelerometerPayload(true);
        SensorsPacket.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:sensors_packet.SensorAccelerometerPayload)
    }
    
    public static final class SensorMagnetometerPayload extends
        com.google.protobuf.GeneratedMessage {
      // Use SensorMagnetometerPayload.newBuilder() to construct.
      private SensorMagnetometerPayload() {
        initFields();
      }
      private SensorMagnetometerPayload(boolean noInit) {}
      
      private static final SensorMagnetometerPayload defaultInstance;
      public static SensorMagnetometerPayload getDefaultInstance() {
        return defaultInstance;
      }
      
      public SensorMagnetometerPayload getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SensorsPacket.internal_static_sensors_packet_SensorMagnetometerPayload_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SensorsPacket.internal_static_sensors_packet_SensorMagnetometerPayload_fieldAccessorTable;
      }
      
      // optional double x = 1;
      public static final int X_FIELD_NUMBER = 1;
      private boolean hasX;
      private double x_ = 0D;
      public boolean hasX() { return hasX; }
      public double getX() { return x_; }
      
      // optional double y = 2;
      public static final int Y_FIELD_NUMBER = 2;
      private boolean hasY;
      private double y_ = 0D;
      public boolean hasY() { return hasY; }
      public double getY() { return y_; }
      
      // optional double z = 3;
      public static final int Z_FIELD_NUMBER = 3;
      private boolean hasZ;
      private double z_ = 0D;
      public boolean hasZ() { return hasZ; }
      public double getZ() { return z_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasX()) {
          output.writeDouble(1, getX());
        }
        if (hasY()) {
          output.writeDouble(2, getY());
        }
        if (hasZ()) {
          output.writeDouble(3, getZ());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasX()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, getX());
        }
        if (hasY()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, getY());
        }
        if (hasZ()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, getZ());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static SensorsPacket.sensors_packet.SensorMagnetometerPayload parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorMagnetometerPayload parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorMagnetometerPayload parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorMagnetometerPayload parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorMagnetometerPayload parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorMagnetometerPayload parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorMagnetometerPayload parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorMagnetometerPayload parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorMagnetometerPayload parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorMagnetometerPayload parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(SensorsPacket.sensors_packet.SensorMagnetometerPayload prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private SensorsPacket.sensors_packet.SensorMagnetometerPayload result;
        
        // Construct using SensorsPacket.sensors_packet.SensorMagnetometerPayload.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new SensorsPacket.sensors_packet.SensorMagnetometerPayload();
          return builder;
        }
        
        protected SensorsPacket.sensors_packet.SensorMagnetometerPayload internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new SensorsPacket.sensors_packet.SensorMagnetometerPayload();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SensorsPacket.sensors_packet.SensorMagnetometerPayload.getDescriptor();
        }
        
        public SensorsPacket.sensors_packet.SensorMagnetometerPayload getDefaultInstanceForType() {
          return SensorsPacket.sensors_packet.SensorMagnetometerPayload.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public SensorsPacket.sensors_packet.SensorMagnetometerPayload build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private SensorsPacket.sensors_packet.SensorMagnetometerPayload buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public SensorsPacket.sensors_packet.SensorMagnetometerPayload buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          SensorsPacket.sensors_packet.SensorMagnetometerPayload returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SensorsPacket.sensors_packet.SensorMagnetometerPayload) {
            return mergeFrom((SensorsPacket.sensors_packet.SensorMagnetometerPayload)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(SensorsPacket.sensors_packet.SensorMagnetometerPayload other) {
          if (other == SensorsPacket.sensors_packet.SensorMagnetometerPayload.getDefaultInstance()) return this;
          if (other.hasX()) {
            setX(other.getX());
          }
          if (other.hasY()) {
            setY(other.getY());
          }
          if (other.hasZ()) {
            setZ(other.getZ());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 9: {
                setX(input.readDouble());
                break;
              }
              case 17: {
                setY(input.readDouble());
                break;
              }
              case 25: {
                setZ(input.readDouble());
                break;
              }
            }
          }
        }
        
        
        // optional double x = 1;
        public boolean hasX() {
          return result.hasX();
        }
        public double getX() {
          return result.getX();
        }
        public Builder setX(double value) {
          result.hasX = true;
          result.x_ = value;
          return this;
        }
        public Builder clearX() {
          result.hasX = false;
          result.x_ = 0D;
          return this;
        }
        
        // optional double y = 2;
        public boolean hasY() {
          return result.hasY();
        }
        public double getY() {
          return result.getY();
        }
        public Builder setY(double value) {
          result.hasY = true;
          result.y_ = value;
          return this;
        }
        public Builder clearY() {
          result.hasY = false;
          result.y_ = 0D;
          return this;
        }
        
        // optional double z = 3;
        public boolean hasZ() {
          return result.hasZ();
        }
        public double getZ() {
          return result.getZ();
        }
        public Builder setZ(double value) {
          result.hasZ = true;
          result.z_ = value;
          return this;
        }
        public Builder clearZ() {
          result.hasZ = false;
          result.z_ = 0D;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:sensors_packet.SensorMagnetometerPayload)
      }
      
      static {
        defaultInstance = new SensorMagnetometerPayload(true);
        SensorsPacket.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:sensors_packet.SensorMagnetometerPayload)
    }
    
    public static final class SensorOrientationPayload extends
        com.google.protobuf.GeneratedMessage {
      // Use SensorOrientationPayload.newBuilder() to construct.
      private SensorOrientationPayload() {
        initFields();
      }
      private SensorOrientationPayload(boolean noInit) {}
      
      private static final SensorOrientationPayload defaultInstance;
      public static SensorOrientationPayload getDefaultInstance() {
        return defaultInstance;
      }
      
      public SensorOrientationPayload getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SensorsPacket.internal_static_sensors_packet_SensorOrientationPayload_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SensorsPacket.internal_static_sensors_packet_SensorOrientationPayload_fieldAccessorTable;
      }
      
      // optional double azimuth = 1;
      public static final int AZIMUTH_FIELD_NUMBER = 1;
      private boolean hasAzimuth;
      private double azimuth_ = 0D;
      public boolean hasAzimuth() { return hasAzimuth; }
      public double getAzimuth() { return azimuth_; }
      
      // optional double pitch = 2;
      public static final int PITCH_FIELD_NUMBER = 2;
      private boolean hasPitch;
      private double pitch_ = 0D;
      public boolean hasPitch() { return hasPitch; }
      public double getPitch() { return pitch_; }
      
      // optional double roll = 3;
      public static final int ROLL_FIELD_NUMBER = 3;
      private boolean hasRoll;
      private double roll_ = 0D;
      public boolean hasRoll() { return hasRoll; }
      public double getRoll() { return roll_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasAzimuth()) {
          output.writeDouble(1, getAzimuth());
        }
        if (hasPitch()) {
          output.writeDouble(2, getPitch());
        }
        if (hasRoll()) {
          output.writeDouble(3, getRoll());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasAzimuth()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, getAzimuth());
        }
        if (hasPitch()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, getPitch());
        }
        if (hasRoll()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, getRoll());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static SensorsPacket.sensors_packet.SensorOrientationPayload parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorOrientationPayload parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorOrientationPayload parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorOrientationPayload parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorOrientationPayload parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorOrientationPayload parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorOrientationPayload parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorOrientationPayload parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorOrientationPayload parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorOrientationPayload parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(SensorsPacket.sensors_packet.SensorOrientationPayload prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private SensorsPacket.sensors_packet.SensorOrientationPayload result;
        
        // Construct using SensorsPacket.sensors_packet.SensorOrientationPayload.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new SensorsPacket.sensors_packet.SensorOrientationPayload();
          return builder;
        }
        
        protected SensorsPacket.sensors_packet.SensorOrientationPayload internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new SensorsPacket.sensors_packet.SensorOrientationPayload();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SensorsPacket.sensors_packet.SensorOrientationPayload.getDescriptor();
        }
        
        public SensorsPacket.sensors_packet.SensorOrientationPayload getDefaultInstanceForType() {
          return SensorsPacket.sensors_packet.SensorOrientationPayload.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public SensorsPacket.sensors_packet.SensorOrientationPayload build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private SensorsPacket.sensors_packet.SensorOrientationPayload buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public SensorsPacket.sensors_packet.SensorOrientationPayload buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          SensorsPacket.sensors_packet.SensorOrientationPayload returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SensorsPacket.sensors_packet.SensorOrientationPayload) {
            return mergeFrom((SensorsPacket.sensors_packet.SensorOrientationPayload)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(SensorsPacket.sensors_packet.SensorOrientationPayload other) {
          if (other == SensorsPacket.sensors_packet.SensorOrientationPayload.getDefaultInstance()) return this;
          if (other.hasAzimuth()) {
            setAzimuth(other.getAzimuth());
          }
          if (other.hasPitch()) {
            setPitch(other.getPitch());
          }
          if (other.hasRoll()) {
            setRoll(other.getRoll());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 9: {
                setAzimuth(input.readDouble());
                break;
              }
              case 17: {
                setPitch(input.readDouble());
                break;
              }
              case 25: {
                setRoll(input.readDouble());
                break;
              }
            }
          }
        }
        
        
        // optional double azimuth = 1;
        public boolean hasAzimuth() {
          return result.hasAzimuth();
        }
        public double getAzimuth() {
          return result.getAzimuth();
        }
        public Builder setAzimuth(double value) {
          result.hasAzimuth = true;
          result.azimuth_ = value;
          return this;
        }
        public Builder clearAzimuth() {
          result.hasAzimuth = false;
          result.azimuth_ = 0D;
          return this;
        }
        
        // optional double pitch = 2;
        public boolean hasPitch() {
          return result.hasPitch();
        }
        public double getPitch() {
          return result.getPitch();
        }
        public Builder setPitch(double value) {
          result.hasPitch = true;
          result.pitch_ = value;
          return this;
        }
        public Builder clearPitch() {
          result.hasPitch = false;
          result.pitch_ = 0D;
          return this;
        }
        
        // optional double roll = 3;
        public boolean hasRoll() {
          return result.hasRoll();
        }
        public double getRoll() {
          return result.getRoll();
        }
        public Builder setRoll(double value) {
          result.hasRoll = true;
          result.roll_ = value;
          return this;
        }
        public Builder clearRoll() {
          result.hasRoll = false;
          result.roll_ = 0D;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:sensors_packet.SensorOrientationPayload)
      }
      
      static {
        defaultInstance = new SensorOrientationPayload(true);
        SensorsPacket.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:sensors_packet.SensorOrientationPayload)
    }
    
    public static final class SensorGyroscopePayload extends
        com.google.protobuf.GeneratedMessage {
      // Use SensorGyroscopePayload.newBuilder() to construct.
      private SensorGyroscopePayload() {
        initFields();
      }
      private SensorGyroscopePayload(boolean noInit) {}
      
      private static final SensorGyroscopePayload defaultInstance;
      public static SensorGyroscopePayload getDefaultInstance() {
        return defaultInstance;
      }
      
      public SensorGyroscopePayload getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SensorsPacket.internal_static_sensors_packet_SensorGyroscopePayload_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SensorsPacket.internal_static_sensors_packet_SensorGyroscopePayload_fieldAccessorTable;
      }
      
      // optional double azimuth = 1;
      public static final int AZIMUTH_FIELD_NUMBER = 1;
      private boolean hasAzimuth;
      private double azimuth_ = 0D;
      public boolean hasAzimuth() { return hasAzimuth; }
      public double getAzimuth() { return azimuth_; }
      
      // optional double pitch = 2;
      public static final int PITCH_FIELD_NUMBER = 2;
      private boolean hasPitch;
      private double pitch_ = 0D;
      public boolean hasPitch() { return hasPitch; }
      public double getPitch() { return pitch_; }
      
      // optional double roll = 3;
      public static final int ROLL_FIELD_NUMBER = 3;
      private boolean hasRoll;
      private double roll_ = 0D;
      public boolean hasRoll() { return hasRoll; }
      public double getRoll() { return roll_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasAzimuth()) {
          output.writeDouble(1, getAzimuth());
        }
        if (hasPitch()) {
          output.writeDouble(2, getPitch());
        }
        if (hasRoll()) {
          output.writeDouble(3, getRoll());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasAzimuth()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, getAzimuth());
        }
        if (hasPitch()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, getPitch());
        }
        if (hasRoll()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, getRoll());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static SensorsPacket.sensors_packet.SensorGyroscopePayload parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorGyroscopePayload parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorGyroscopePayload parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorGyroscopePayload parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorGyroscopePayload parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorGyroscopePayload parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorGyroscopePayload parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorGyroscopePayload parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorGyroscopePayload parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorGyroscopePayload parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(SensorsPacket.sensors_packet.SensorGyroscopePayload prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private SensorsPacket.sensors_packet.SensorGyroscopePayload result;
        
        // Construct using SensorsPacket.sensors_packet.SensorGyroscopePayload.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new SensorsPacket.sensors_packet.SensorGyroscopePayload();
          return builder;
        }
        
        protected SensorsPacket.sensors_packet.SensorGyroscopePayload internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new SensorsPacket.sensors_packet.SensorGyroscopePayload();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SensorsPacket.sensors_packet.SensorGyroscopePayload.getDescriptor();
        }
        
        public SensorsPacket.sensors_packet.SensorGyroscopePayload getDefaultInstanceForType() {
          return SensorsPacket.sensors_packet.SensorGyroscopePayload.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public SensorsPacket.sensors_packet.SensorGyroscopePayload build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private SensorsPacket.sensors_packet.SensorGyroscopePayload buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public SensorsPacket.sensors_packet.SensorGyroscopePayload buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          SensorsPacket.sensors_packet.SensorGyroscopePayload returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SensorsPacket.sensors_packet.SensorGyroscopePayload) {
            return mergeFrom((SensorsPacket.sensors_packet.SensorGyroscopePayload)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(SensorsPacket.sensors_packet.SensorGyroscopePayload other) {
          if (other == SensorsPacket.sensors_packet.SensorGyroscopePayload.getDefaultInstance()) return this;
          if (other.hasAzimuth()) {
            setAzimuth(other.getAzimuth());
          }
          if (other.hasPitch()) {
            setPitch(other.getPitch());
          }
          if (other.hasRoll()) {
            setRoll(other.getRoll());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 9: {
                setAzimuth(input.readDouble());
                break;
              }
              case 17: {
                setPitch(input.readDouble());
                break;
              }
              case 25: {
                setRoll(input.readDouble());
                break;
              }
            }
          }
        }
        
        
        // optional double azimuth = 1;
        public boolean hasAzimuth() {
          return result.hasAzimuth();
        }
        public double getAzimuth() {
          return result.getAzimuth();
        }
        public Builder setAzimuth(double value) {
          result.hasAzimuth = true;
          result.azimuth_ = value;
          return this;
        }
        public Builder clearAzimuth() {
          result.hasAzimuth = false;
          result.azimuth_ = 0D;
          return this;
        }
        
        // optional double pitch = 2;
        public boolean hasPitch() {
          return result.hasPitch();
        }
        public double getPitch() {
          return result.getPitch();
        }
        public Builder setPitch(double value) {
          result.hasPitch = true;
          result.pitch_ = value;
          return this;
        }
        public Builder clearPitch() {
          result.hasPitch = false;
          result.pitch_ = 0D;
          return this;
        }
        
        // optional double roll = 3;
        public boolean hasRoll() {
          return result.hasRoll();
        }
        public double getRoll() {
          return result.getRoll();
        }
        public Builder setRoll(double value) {
          result.hasRoll = true;
          result.roll_ = value;
          return this;
        }
        public Builder clearRoll() {
          result.hasRoll = false;
          result.roll_ = 0D;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:sensors_packet.SensorGyroscopePayload)
      }
      
      static {
        defaultInstance = new SensorGyroscopePayload(true);
        SensorsPacket.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:sensors_packet.SensorGyroscopePayload)
    }
    
    public static final class SensorGravityPayload extends
        com.google.protobuf.GeneratedMessage {
      // Use SensorGravityPayload.newBuilder() to construct.
      private SensorGravityPayload() {
        initFields();
      }
      private SensorGravityPayload(boolean noInit) {}
      
      private static final SensorGravityPayload defaultInstance;
      public static SensorGravityPayload getDefaultInstance() {
        return defaultInstance;
      }
      
      public SensorGravityPayload getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SensorsPacket.internal_static_sensors_packet_SensorGravityPayload_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SensorsPacket.internal_static_sensors_packet_SensorGravityPayload_fieldAccessorTable;
      }
      
      // optional double x = 1;
      public static final int X_FIELD_NUMBER = 1;
      private boolean hasX;
      private double x_ = 0D;
      public boolean hasX() { return hasX; }
      public double getX() { return x_; }
      
      // optional double y = 2;
      public static final int Y_FIELD_NUMBER = 2;
      private boolean hasY;
      private double y_ = 0D;
      public boolean hasY() { return hasY; }
      public double getY() { return y_; }
      
      // optional double z = 3;
      public static final int Z_FIELD_NUMBER = 3;
      private boolean hasZ;
      private double z_ = 0D;
      public boolean hasZ() { return hasZ; }
      public double getZ() { return z_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasX()) {
          output.writeDouble(1, getX());
        }
        if (hasY()) {
          output.writeDouble(2, getY());
        }
        if (hasZ()) {
          output.writeDouble(3, getZ());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasX()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, getX());
        }
        if (hasY()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, getY());
        }
        if (hasZ()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, getZ());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static SensorsPacket.sensors_packet.SensorGravityPayload parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorGravityPayload parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorGravityPayload parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorGravityPayload parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorGravityPayload parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorGravityPayload parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorGravityPayload parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorGravityPayload parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorGravityPayload parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorGravityPayload parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(SensorsPacket.sensors_packet.SensorGravityPayload prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private SensorsPacket.sensors_packet.SensorGravityPayload result;
        
        // Construct using SensorsPacket.sensors_packet.SensorGravityPayload.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new SensorsPacket.sensors_packet.SensorGravityPayload();
          return builder;
        }
        
        protected SensorsPacket.sensors_packet.SensorGravityPayload internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new SensorsPacket.sensors_packet.SensorGravityPayload();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SensorsPacket.sensors_packet.SensorGravityPayload.getDescriptor();
        }
        
        public SensorsPacket.sensors_packet.SensorGravityPayload getDefaultInstanceForType() {
          return SensorsPacket.sensors_packet.SensorGravityPayload.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public SensorsPacket.sensors_packet.SensorGravityPayload build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private SensorsPacket.sensors_packet.SensorGravityPayload buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public SensorsPacket.sensors_packet.SensorGravityPayload buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          SensorsPacket.sensors_packet.SensorGravityPayload returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SensorsPacket.sensors_packet.SensorGravityPayload) {
            return mergeFrom((SensorsPacket.sensors_packet.SensorGravityPayload)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(SensorsPacket.sensors_packet.SensorGravityPayload other) {
          if (other == SensorsPacket.sensors_packet.SensorGravityPayload.getDefaultInstance()) return this;
          if (other.hasX()) {
            setX(other.getX());
          }
          if (other.hasY()) {
            setY(other.getY());
          }
          if (other.hasZ()) {
            setZ(other.getZ());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 9: {
                setX(input.readDouble());
                break;
              }
              case 17: {
                setY(input.readDouble());
                break;
              }
              case 25: {
                setZ(input.readDouble());
                break;
              }
            }
          }
        }
        
        
        // optional double x = 1;
        public boolean hasX() {
          return result.hasX();
        }
        public double getX() {
          return result.getX();
        }
        public Builder setX(double value) {
          result.hasX = true;
          result.x_ = value;
          return this;
        }
        public Builder clearX() {
          result.hasX = false;
          result.x_ = 0D;
          return this;
        }
        
        // optional double y = 2;
        public boolean hasY() {
          return result.hasY();
        }
        public double getY() {
          return result.getY();
        }
        public Builder setY(double value) {
          result.hasY = true;
          result.y_ = value;
          return this;
        }
        public Builder clearY() {
          result.hasY = false;
          result.y_ = 0D;
          return this;
        }
        
        // optional double z = 3;
        public boolean hasZ() {
          return result.hasZ();
        }
        public double getZ() {
          return result.getZ();
        }
        public Builder setZ(double value) {
          result.hasZ = true;
          result.z_ = value;
          return this;
        }
        public Builder clearZ() {
          result.hasZ = false;
          result.z_ = 0D;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:sensors_packet.SensorGravityPayload)
      }
      
      static {
        defaultInstance = new SensorGravityPayload(true);
        SensorsPacket.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:sensors_packet.SensorGravityPayload)
    }
    
    public static final class SensorLinearAccPayload extends
        com.google.protobuf.GeneratedMessage {
      // Use SensorLinearAccPayload.newBuilder() to construct.
      private SensorLinearAccPayload() {
        initFields();
      }
      private SensorLinearAccPayload(boolean noInit) {}
      
      private static final SensorLinearAccPayload defaultInstance;
      public static SensorLinearAccPayload getDefaultInstance() {
        return defaultInstance;
      }
      
      public SensorLinearAccPayload getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SensorsPacket.internal_static_sensors_packet_SensorLinearAccPayload_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SensorsPacket.internal_static_sensors_packet_SensorLinearAccPayload_fieldAccessorTable;
      }
      
      // optional double x = 1;
      public static final int X_FIELD_NUMBER = 1;
      private boolean hasX;
      private double x_ = 0D;
      public boolean hasX() { return hasX; }
      public double getX() { return x_; }
      
      // optional double y = 2;
      public static final int Y_FIELD_NUMBER = 2;
      private boolean hasY;
      private double y_ = 0D;
      public boolean hasY() { return hasY; }
      public double getY() { return y_; }
      
      // optional double z = 3;
      public static final int Z_FIELD_NUMBER = 3;
      private boolean hasZ;
      private double z_ = 0D;
      public boolean hasZ() { return hasZ; }
      public double getZ() { return z_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasX()) {
          output.writeDouble(1, getX());
        }
        if (hasY()) {
          output.writeDouble(2, getY());
        }
        if (hasZ()) {
          output.writeDouble(3, getZ());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasX()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, getX());
        }
        if (hasY()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, getY());
        }
        if (hasZ()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, getZ());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static SensorsPacket.sensors_packet.SensorLinearAccPayload parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorLinearAccPayload parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorLinearAccPayload parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorLinearAccPayload parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorLinearAccPayload parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorLinearAccPayload parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorLinearAccPayload parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorLinearAccPayload parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorLinearAccPayload parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorLinearAccPayload parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(SensorsPacket.sensors_packet.SensorLinearAccPayload prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private SensorsPacket.sensors_packet.SensorLinearAccPayload result;
        
        // Construct using SensorsPacket.sensors_packet.SensorLinearAccPayload.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new SensorsPacket.sensors_packet.SensorLinearAccPayload();
          return builder;
        }
        
        protected SensorsPacket.sensors_packet.SensorLinearAccPayload internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new SensorsPacket.sensors_packet.SensorLinearAccPayload();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SensorsPacket.sensors_packet.SensorLinearAccPayload.getDescriptor();
        }
        
        public SensorsPacket.sensors_packet.SensorLinearAccPayload getDefaultInstanceForType() {
          return SensorsPacket.sensors_packet.SensorLinearAccPayload.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public SensorsPacket.sensors_packet.SensorLinearAccPayload build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private SensorsPacket.sensors_packet.SensorLinearAccPayload buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public SensorsPacket.sensors_packet.SensorLinearAccPayload buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          SensorsPacket.sensors_packet.SensorLinearAccPayload returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SensorsPacket.sensors_packet.SensorLinearAccPayload) {
            return mergeFrom((SensorsPacket.sensors_packet.SensorLinearAccPayload)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(SensorsPacket.sensors_packet.SensorLinearAccPayload other) {
          if (other == SensorsPacket.sensors_packet.SensorLinearAccPayload.getDefaultInstance()) return this;
          if (other.hasX()) {
            setX(other.getX());
          }
          if (other.hasY()) {
            setY(other.getY());
          }
          if (other.hasZ()) {
            setZ(other.getZ());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 9: {
                setX(input.readDouble());
                break;
              }
              case 17: {
                setY(input.readDouble());
                break;
              }
              case 25: {
                setZ(input.readDouble());
                break;
              }
            }
          }
        }
        
        
        // optional double x = 1;
        public boolean hasX() {
          return result.hasX();
        }
        public double getX() {
          return result.getX();
        }
        public Builder setX(double value) {
          result.hasX = true;
          result.x_ = value;
          return this;
        }
        public Builder clearX() {
          result.hasX = false;
          result.x_ = 0D;
          return this;
        }
        
        // optional double y = 2;
        public boolean hasY() {
          return result.hasY();
        }
        public double getY() {
          return result.getY();
        }
        public Builder setY(double value) {
          result.hasY = true;
          result.y_ = value;
          return this;
        }
        public Builder clearY() {
          result.hasY = false;
          result.y_ = 0D;
          return this;
        }
        
        // optional double z = 3;
        public boolean hasZ() {
          return result.hasZ();
        }
        public double getZ() {
          return result.getZ();
        }
        public Builder setZ(double value) {
          result.hasZ = true;
          result.z_ = value;
          return this;
        }
        public Builder clearZ() {
          result.hasZ = false;
          result.z_ = 0D;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:sensors_packet.SensorLinearAccPayload)
      }
      
      static {
        defaultInstance = new SensorLinearAccPayload(true);
        SensorsPacket.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:sensors_packet.SensorLinearAccPayload)
    }
    
    public static final class SensorRotVectorPayload extends
        com.google.protobuf.GeneratedMessage {
      // Use SensorRotVectorPayload.newBuilder() to construct.
      private SensorRotVectorPayload() {
        initFields();
      }
      private SensorRotVectorPayload(boolean noInit) {}
      
      private static final SensorRotVectorPayload defaultInstance;
      public static SensorRotVectorPayload getDefaultInstance() {
        return defaultInstance;
      }
      
      public SensorRotVectorPayload getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SensorsPacket.internal_static_sensors_packet_SensorRotVectorPayload_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SensorsPacket.internal_static_sensors_packet_SensorRotVectorPayload_fieldAccessorTable;
      }
      
      // optional uint32 size = 1;
      public static final int SIZE_FIELD_NUMBER = 1;
      private boolean hasSize;
      private int size_ = 0;
      public boolean hasSize() { return hasSize; }
      public int getSize() { return size_; }
      
      // repeated double data = 2 [packed = true];
      public static final int DATA_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Double> data_ =
        java.util.Collections.emptyList();
      public java.util.List<java.lang.Double> getDataList() {
        return data_;
      }
      public int getDataCount() { return data_.size(); }
      public double getData(int index) {
        return data_.get(index);
      }
      private int dataMemoizedSerializedSize = -1;
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasSize()) {
          output.writeUInt32(1, getSize());
        }
        if (getDataList().size() > 0) {
          output.writeRawVarint32(18);
          output.writeRawVarint32(dataMemoizedSerializedSize);
        }
        for (double element : getDataList()) {
          output.writeDoubleNoTag(element);
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasSize()) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, getSize());
        }
        {
          int dataSize = 0;
          dataSize = 8 * getDataList().size();
          size += dataSize;
          if (!getDataList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          dataMemoizedSerializedSize = dataSize;
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static SensorsPacket.sensors_packet.SensorRotVectorPayload parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorRotVectorPayload parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorRotVectorPayload parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorRotVectorPayload parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorRotVectorPayload parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorRotVectorPayload parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorRotVectorPayload parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorRotVectorPayload parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorRotVectorPayload parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorRotVectorPayload parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(SensorsPacket.sensors_packet.SensorRotVectorPayload prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private SensorsPacket.sensors_packet.SensorRotVectorPayload result;
        
        // Construct using SensorsPacket.sensors_packet.SensorRotVectorPayload.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new SensorsPacket.sensors_packet.SensorRotVectorPayload();
          return builder;
        }
        
        protected SensorsPacket.sensors_packet.SensorRotVectorPayload internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new SensorsPacket.sensors_packet.SensorRotVectorPayload();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SensorsPacket.sensors_packet.SensorRotVectorPayload.getDescriptor();
        }
        
        public SensorsPacket.sensors_packet.SensorRotVectorPayload getDefaultInstanceForType() {
          return SensorsPacket.sensors_packet.SensorRotVectorPayload.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public SensorsPacket.sensors_packet.SensorRotVectorPayload build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private SensorsPacket.sensors_packet.SensorRotVectorPayload buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public SensorsPacket.sensors_packet.SensorRotVectorPayload buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          if (result.data_ != java.util.Collections.EMPTY_LIST) {
            result.data_ =
              java.util.Collections.unmodifiableList(result.data_);
          }
          SensorsPacket.sensors_packet.SensorRotVectorPayload returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SensorsPacket.sensors_packet.SensorRotVectorPayload) {
            return mergeFrom((SensorsPacket.sensors_packet.SensorRotVectorPayload)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(SensorsPacket.sensors_packet.SensorRotVectorPayload other) {
          if (other == SensorsPacket.sensors_packet.SensorRotVectorPayload.getDefaultInstance()) return this;
          if (other.hasSize()) {
            setSize(other.getSize());
          }
          if (!other.data_.isEmpty()) {
            if (result.data_.isEmpty()) {
              result.data_ = new java.util.ArrayList<java.lang.Double>();
            }
            result.data_.addAll(other.data_);
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 8: {
                setSize(input.readUInt32());
                break;
              }
              case 17: {
                addData(input.readDouble());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                while (input.getBytesUntilLimit() > 0) {
                  addData(input.readDouble());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        }
        
        
        // optional uint32 size = 1;
        public boolean hasSize() {
          return result.hasSize();
        }
        public int getSize() {
          return result.getSize();
        }
        public Builder setSize(int value) {
          result.hasSize = true;
          result.size_ = value;
          return this;
        }
        public Builder clearSize() {
          result.hasSize = false;
          result.size_ = 0;
          return this;
        }
        
        // repeated double data = 2 [packed = true];
        public java.util.List<java.lang.Double> getDataList() {
          return java.util.Collections.unmodifiableList(result.data_);
        }
        public int getDataCount() {
          return result.getDataCount();
        }
        public double getData(int index) {
          return result.getData(index);
        }
        public Builder setData(int index, double value) {
          result.data_.set(index, value);
          return this;
        }
        public Builder addData(double value) {
          if (result.data_.isEmpty()) {
            result.data_ = new java.util.ArrayList<java.lang.Double>();
          }
          result.data_.add(value);
          return this;
        }
        public Builder addAllData(
            java.lang.Iterable<? extends java.lang.Double> values) {
          if (result.data_.isEmpty()) {
            result.data_ = new java.util.ArrayList<java.lang.Double>();
          }
          super.addAll(values, result.data_);
          return this;
        }
        public Builder clearData() {
          result.data_ = java.util.Collections.emptyList();
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:sensors_packet.SensorRotVectorPayload)
      }
      
      static {
        defaultInstance = new SensorRotVectorPayload(true);
        SensorsPacket.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:sensors_packet.SensorRotVectorPayload)
    }
    
    public static final class SensorTemperaturePayload extends
        com.google.protobuf.GeneratedMessage {
      // Use SensorTemperaturePayload.newBuilder() to construct.
      private SensorTemperaturePayload() {
        initFields();
      }
      private SensorTemperaturePayload(boolean noInit) {}
      
      private static final SensorTemperaturePayload defaultInstance;
      public static SensorTemperaturePayload getDefaultInstance() {
        return defaultInstance;
      }
      
      public SensorTemperaturePayload getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SensorsPacket.internal_static_sensors_packet_SensorTemperaturePayload_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SensorsPacket.internal_static_sensors_packet_SensorTemperaturePayload_fieldAccessorTable;
      }
      
      // optional double temperature = 1;
      public static final int TEMPERATURE_FIELD_NUMBER = 1;
      private boolean hasTemperature;
      private double temperature_ = 0D;
      public boolean hasTemperature() { return hasTemperature; }
      public double getTemperature() { return temperature_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasTemperature()) {
          output.writeDouble(1, getTemperature());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasTemperature()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, getTemperature());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static SensorsPacket.sensors_packet.SensorTemperaturePayload parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorTemperaturePayload parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorTemperaturePayload parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorTemperaturePayload parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorTemperaturePayload parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorTemperaturePayload parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorTemperaturePayload parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorTemperaturePayload parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorTemperaturePayload parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorTemperaturePayload parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(SensorsPacket.sensors_packet.SensorTemperaturePayload prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private SensorsPacket.sensors_packet.SensorTemperaturePayload result;
        
        // Construct using SensorsPacket.sensors_packet.SensorTemperaturePayload.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new SensorsPacket.sensors_packet.SensorTemperaturePayload();
          return builder;
        }
        
        protected SensorsPacket.sensors_packet.SensorTemperaturePayload internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new SensorsPacket.sensors_packet.SensorTemperaturePayload();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SensorsPacket.sensors_packet.SensorTemperaturePayload.getDescriptor();
        }
        
        public SensorsPacket.sensors_packet.SensorTemperaturePayload getDefaultInstanceForType() {
          return SensorsPacket.sensors_packet.SensorTemperaturePayload.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public SensorsPacket.sensors_packet.SensorTemperaturePayload build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private SensorsPacket.sensors_packet.SensorTemperaturePayload buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public SensorsPacket.sensors_packet.SensorTemperaturePayload buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          SensorsPacket.sensors_packet.SensorTemperaturePayload returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SensorsPacket.sensors_packet.SensorTemperaturePayload) {
            return mergeFrom((SensorsPacket.sensors_packet.SensorTemperaturePayload)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(SensorsPacket.sensors_packet.SensorTemperaturePayload other) {
          if (other == SensorsPacket.sensors_packet.SensorTemperaturePayload.getDefaultInstance()) return this;
          if (other.hasTemperature()) {
            setTemperature(other.getTemperature());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 9: {
                setTemperature(input.readDouble());
                break;
              }
            }
          }
        }
        
        
        // optional double temperature = 1;
        public boolean hasTemperature() {
          return result.hasTemperature();
        }
        public double getTemperature() {
          return result.getTemperature();
        }
        public Builder setTemperature(double value) {
          result.hasTemperature = true;
          result.temperature_ = value;
          return this;
        }
        public Builder clearTemperature() {
          result.hasTemperature = false;
          result.temperature_ = 0D;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:sensors_packet.SensorTemperaturePayload)
      }
      
      static {
        defaultInstance = new SensorTemperaturePayload(true);
        SensorsPacket.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:sensors_packet.SensorTemperaturePayload)
    }
    
    public static final class SensorProximityPayload extends
        com.google.protobuf.GeneratedMessage {
      // Use SensorProximityPayload.newBuilder() to construct.
      private SensorProximityPayload() {
        initFields();
      }
      private SensorProximityPayload(boolean noInit) {}
      
      private static final SensorProximityPayload defaultInstance;
      public static SensorProximityPayload getDefaultInstance() {
        return defaultInstance;
      }
      
      public SensorProximityPayload getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SensorsPacket.internal_static_sensors_packet_SensorProximityPayload_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SensorsPacket.internal_static_sensors_packet_SensorProximityPayload_fieldAccessorTable;
      }
      
      // optional double distance = 1;
      public static final int DISTANCE_FIELD_NUMBER = 1;
      private boolean hasDistance;
      private double distance_ = 0D;
      public boolean hasDistance() { return hasDistance; }
      public double getDistance() { return distance_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasDistance()) {
          output.writeDouble(1, getDistance());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasDistance()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, getDistance());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static SensorsPacket.sensors_packet.SensorProximityPayload parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorProximityPayload parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorProximityPayload parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorProximityPayload parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorProximityPayload parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorProximityPayload parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorProximityPayload parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorProximityPayload parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorProximityPayload parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorProximityPayload parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(SensorsPacket.sensors_packet.SensorProximityPayload prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private SensorsPacket.sensors_packet.SensorProximityPayload result;
        
        // Construct using SensorsPacket.sensors_packet.SensorProximityPayload.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new SensorsPacket.sensors_packet.SensorProximityPayload();
          return builder;
        }
        
        protected SensorsPacket.sensors_packet.SensorProximityPayload internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new SensorsPacket.sensors_packet.SensorProximityPayload();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SensorsPacket.sensors_packet.SensorProximityPayload.getDescriptor();
        }
        
        public SensorsPacket.sensors_packet.SensorProximityPayload getDefaultInstanceForType() {
          return SensorsPacket.sensors_packet.SensorProximityPayload.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public SensorsPacket.sensors_packet.SensorProximityPayload build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private SensorsPacket.sensors_packet.SensorProximityPayload buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public SensorsPacket.sensors_packet.SensorProximityPayload buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          SensorsPacket.sensors_packet.SensorProximityPayload returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SensorsPacket.sensors_packet.SensorProximityPayload) {
            return mergeFrom((SensorsPacket.sensors_packet.SensorProximityPayload)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(SensorsPacket.sensors_packet.SensorProximityPayload other) {
          if (other == SensorsPacket.sensors_packet.SensorProximityPayload.getDefaultInstance()) return this;
          if (other.hasDistance()) {
            setDistance(other.getDistance());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 9: {
                setDistance(input.readDouble());
                break;
              }
            }
          }
        }
        
        
        // optional double distance = 1;
        public boolean hasDistance() {
          return result.hasDistance();
        }
        public double getDistance() {
          return result.getDistance();
        }
        public Builder setDistance(double value) {
          result.hasDistance = true;
          result.distance_ = value;
          return this;
        }
        public Builder clearDistance() {
          result.hasDistance = false;
          result.distance_ = 0D;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:sensors_packet.SensorProximityPayload)
      }
      
      static {
        defaultInstance = new SensorProximityPayload(true);
        SensorsPacket.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:sensors_packet.SensorProximityPayload)
    }
    
    public static final class SensorLightPayload extends
        com.google.protobuf.GeneratedMessage {
      // Use SensorLightPayload.newBuilder() to construct.
      private SensorLightPayload() {
        initFields();
      }
      private SensorLightPayload(boolean noInit) {}
      
      private static final SensorLightPayload defaultInstance;
      public static SensorLightPayload getDefaultInstance() {
        return defaultInstance;
      }
      
      public SensorLightPayload getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SensorsPacket.internal_static_sensors_packet_SensorLightPayload_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SensorsPacket.internal_static_sensors_packet_SensorLightPayload_fieldAccessorTable;
      }
      
      // optional double light = 1;
      public static final int LIGHT_FIELD_NUMBER = 1;
      private boolean hasLight;
      private double light_ = 0D;
      public boolean hasLight() { return hasLight; }
      public double getLight() { return light_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasLight()) {
          output.writeDouble(1, getLight());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasLight()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, getLight());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static SensorsPacket.sensors_packet.SensorLightPayload parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorLightPayload parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorLightPayload parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorLightPayload parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorLightPayload parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorLightPayload parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorLightPayload parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorLightPayload parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorLightPayload parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorLightPayload parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(SensorsPacket.sensors_packet.SensorLightPayload prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private SensorsPacket.sensors_packet.SensorLightPayload result;
        
        // Construct using SensorsPacket.sensors_packet.SensorLightPayload.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new SensorsPacket.sensors_packet.SensorLightPayload();
          return builder;
        }
        
        protected SensorsPacket.sensors_packet.SensorLightPayload internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new SensorsPacket.sensors_packet.SensorLightPayload();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SensorsPacket.sensors_packet.SensorLightPayload.getDescriptor();
        }
        
        public SensorsPacket.sensors_packet.SensorLightPayload getDefaultInstanceForType() {
          return SensorsPacket.sensors_packet.SensorLightPayload.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public SensorsPacket.sensors_packet.SensorLightPayload build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private SensorsPacket.sensors_packet.SensorLightPayload buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public SensorsPacket.sensors_packet.SensorLightPayload buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          SensorsPacket.sensors_packet.SensorLightPayload returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SensorsPacket.sensors_packet.SensorLightPayload) {
            return mergeFrom((SensorsPacket.sensors_packet.SensorLightPayload)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(SensorsPacket.sensors_packet.SensorLightPayload other) {
          if (other == SensorsPacket.sensors_packet.SensorLightPayload.getDefaultInstance()) return this;
          if (other.hasLight()) {
            setLight(other.getLight());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 9: {
                setLight(input.readDouble());
                break;
              }
            }
          }
        }
        
        
        // optional double light = 1;
        public boolean hasLight() {
          return result.hasLight();
        }
        public double getLight() {
          return result.getLight();
        }
        public Builder setLight(double value) {
          result.hasLight = true;
          result.light_ = value;
          return this;
        }
        public Builder clearLight() {
          result.hasLight = false;
          result.light_ = 0D;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:sensors_packet.SensorLightPayload)
      }
      
      static {
        defaultInstance = new SensorLightPayload(true);
        SensorsPacket.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:sensors_packet.SensorLightPayload)
    }
    
    public static final class SensorPressurePayload extends
        com.google.protobuf.GeneratedMessage {
      // Use SensorPressurePayload.newBuilder() to construct.
      private SensorPressurePayload() {
        initFields();
      }
      private SensorPressurePayload(boolean noInit) {}
      
      private static final SensorPressurePayload defaultInstance;
      public static SensorPressurePayload getDefaultInstance() {
        return defaultInstance;
      }
      
      public SensorPressurePayload getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SensorsPacket.internal_static_sensors_packet_SensorPressurePayload_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SensorsPacket.internal_static_sensors_packet_SensorPressurePayload_fieldAccessorTable;
      }
      
      // optional double pressure = 1;
      public static final int PRESSURE_FIELD_NUMBER = 1;
      private boolean hasPressure;
      private double pressure_ = 0D;
      public boolean hasPressure() { return hasPressure; }
      public double getPressure() { return pressure_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasPressure()) {
          output.writeDouble(1, getPressure());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasPressure()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, getPressure());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static SensorsPacket.sensors_packet.SensorPressurePayload parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorPressurePayload parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorPressurePayload parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorPressurePayload parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorPressurePayload parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorPressurePayload parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorPressurePayload parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorPressurePayload parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorPressurePayload parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorPressurePayload parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(SensorsPacket.sensors_packet.SensorPressurePayload prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private SensorsPacket.sensors_packet.SensorPressurePayload result;
        
        // Construct using SensorsPacket.sensors_packet.SensorPressurePayload.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new SensorsPacket.sensors_packet.SensorPressurePayload();
          return builder;
        }
        
        protected SensorsPacket.sensors_packet.SensorPressurePayload internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new SensorsPacket.sensors_packet.SensorPressurePayload();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SensorsPacket.sensors_packet.SensorPressurePayload.getDescriptor();
        }
        
        public SensorsPacket.sensors_packet.SensorPressurePayload getDefaultInstanceForType() {
          return SensorsPacket.sensors_packet.SensorPressurePayload.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public SensorsPacket.sensors_packet.SensorPressurePayload build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private SensorsPacket.sensors_packet.SensorPressurePayload buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public SensorsPacket.sensors_packet.SensorPressurePayload buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          SensorsPacket.sensors_packet.SensorPressurePayload returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SensorsPacket.sensors_packet.SensorPressurePayload) {
            return mergeFrom((SensorsPacket.sensors_packet.SensorPressurePayload)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(SensorsPacket.sensors_packet.SensorPressurePayload other) {
          if (other == SensorsPacket.sensors_packet.SensorPressurePayload.getDefaultInstance()) return this;
          if (other.hasPressure()) {
            setPressure(other.getPressure());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 9: {
                setPressure(input.readDouble());
                break;
              }
            }
          }
        }
        
        
        // optional double pressure = 1;
        public boolean hasPressure() {
          return result.hasPressure();
        }
        public double getPressure() {
          return result.getPressure();
        }
        public Builder setPressure(double value) {
          result.hasPressure = true;
          result.pressure_ = value;
          return this;
        }
        public Builder clearPressure() {
          result.hasPressure = false;
          result.pressure_ = 0D;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:sensors_packet.SensorPressurePayload)
      }
      
      static {
        defaultInstance = new SensorPressurePayload(true);
        SensorsPacket.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:sensors_packet.SensorPressurePayload)
    }
    
    public static final class SensorRelativeHumidityPayload extends
        com.google.protobuf.GeneratedMessage {
      // Use SensorRelativeHumidityPayload.newBuilder() to construct.
      private SensorRelativeHumidityPayload() {
        initFields();
      }
      private SensorRelativeHumidityPayload(boolean noInit) {}
      
      private static final SensorRelativeHumidityPayload defaultInstance;
      public static SensorRelativeHumidityPayload getDefaultInstance() {
        return defaultInstance;
      }
      
      public SensorRelativeHumidityPayload getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SensorsPacket.internal_static_sensors_packet_SensorRelativeHumidityPayload_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SensorsPacket.internal_static_sensors_packet_SensorRelativeHumidityPayload_fieldAccessorTable;
      }
      
      // optional double relative_humidity = 1;
      public static final int RELATIVE_HUMIDITY_FIELD_NUMBER = 1;
      private boolean hasRelativeHumidity;
      private double relativeHumidity_ = 0D;
      public boolean hasRelativeHumidity() { return hasRelativeHumidity; }
      public double getRelativeHumidity() { return relativeHumidity_; }
      
      private void initFields() {
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasRelativeHumidity()) {
          output.writeDouble(1, getRelativeHumidity());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasRelativeHumidity()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, getRelativeHumidity());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static SensorsPacket.sensors_packet.SensorRelativeHumidityPayload parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorRelativeHumidityPayload parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorRelativeHumidityPayload parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorRelativeHumidityPayload parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorRelativeHumidityPayload parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorRelativeHumidityPayload parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorRelativeHumidityPayload parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorRelativeHumidityPayload parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.SensorRelativeHumidityPayload parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.SensorRelativeHumidityPayload parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(SensorsPacket.sensors_packet.SensorRelativeHumidityPayload prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private SensorsPacket.sensors_packet.SensorRelativeHumidityPayload result;
        
        // Construct using SensorsPacket.sensors_packet.SensorRelativeHumidityPayload.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new SensorsPacket.sensors_packet.SensorRelativeHumidityPayload();
          return builder;
        }
        
        protected SensorsPacket.sensors_packet.SensorRelativeHumidityPayload internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new SensorsPacket.sensors_packet.SensorRelativeHumidityPayload();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SensorsPacket.sensors_packet.SensorRelativeHumidityPayload.getDescriptor();
        }
        
        public SensorsPacket.sensors_packet.SensorRelativeHumidityPayload getDefaultInstanceForType() {
          return SensorsPacket.sensors_packet.SensorRelativeHumidityPayload.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public SensorsPacket.sensors_packet.SensorRelativeHumidityPayload build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private SensorsPacket.sensors_packet.SensorRelativeHumidityPayload buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public SensorsPacket.sensors_packet.SensorRelativeHumidityPayload buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          SensorsPacket.sensors_packet.SensorRelativeHumidityPayload returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SensorsPacket.sensors_packet.SensorRelativeHumidityPayload) {
            return mergeFrom((SensorsPacket.sensors_packet.SensorRelativeHumidityPayload)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(SensorsPacket.sensors_packet.SensorRelativeHumidityPayload other) {
          if (other == SensorsPacket.sensors_packet.SensorRelativeHumidityPayload.getDefaultInstance()) return this;
          if (other.hasRelativeHumidity()) {
            setRelativeHumidity(other.getRelativeHumidity());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 9: {
                setRelativeHumidity(input.readDouble());
                break;
              }
            }
          }
        }
        
        
        // optional double relative_humidity = 1;
        public boolean hasRelativeHumidity() {
          return result.hasRelativeHumidity();
        }
        public double getRelativeHumidity() {
          return result.getRelativeHumidity();
        }
        public Builder setRelativeHumidity(double value) {
          result.hasRelativeHumidity = true;
          result.relativeHumidity_ = value;
          return this;
        }
        public Builder clearRelativeHumidity() {
          result.hasRelativeHumidity = false;
          result.relativeHumidity_ = 0D;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:sensors_packet.SensorRelativeHumidityPayload)
      }
      
      static {
        defaultInstance = new SensorRelativeHumidityPayload(true);
        SensorsPacket.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:sensors_packet.SensorRelativeHumidityPayload)
    }
    
    public static final class BatteryPayload extends
        com.google.protobuf.GeneratedMessage {
      // Use BatteryPayload.newBuilder() to construct.
      private BatteryPayload() {
        initFields();
      }
      private BatteryPayload(boolean noInit) {}
      
      private static final BatteryPayload defaultInstance;
      public static BatteryPayload getDefaultInstance() {
        return defaultInstance;
      }
      
      public BatteryPayload getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SensorsPacket.internal_static_sensors_packet_BatteryPayload_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SensorsPacket.internal_static_sensors_packet_BatteryPayload_fieldAccessorTable;
      }
      
      public enum BatteryStatusType
          implements com.google.protobuf.ProtocolMessageEnum {
        CHARGING(0, 0),
        DISCHARGING(1, 2),
        NOTCHARGING(2, 3),
        FULL(3, 4),
        UNKNOWN(4, 5),
        ;
        
        
        public final int getNumber() { return value; }
        
        public static BatteryStatusType valueOf(int value) {
          switch (value) {
            case 0: return CHARGING;
            case 2: return DISCHARGING;
            case 3: return NOTCHARGING;
            case 4: return FULL;
            case 5: return UNKNOWN;
            default: return null;
          }
        }
        
        public static com.google.protobuf.Internal.EnumLiteMap<BatteryStatusType>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static com.google.protobuf.Internal.EnumLiteMap<BatteryStatusType>
            internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<BatteryStatusType>() {
                public BatteryStatusType findValueByNumber(int number) {
                  return BatteryStatusType.valueOf(number)
        ;        }
              };
        
        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(index);
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return SensorsPacket.sensors_packet.BatteryPayload.getDescriptor().getEnumTypes().get(0);
        }
        
        private static final BatteryStatusType[] VALUES = {
          CHARGING, DISCHARGING, NOTCHARGING, FULL, UNKNOWN, 
        };
        public static BatteryStatusType valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }
        private final int index;
        private final int value;
        private BatteryStatusType(int index, int value) {
          this.index = index;
          this.value = value;
        }
        
        static {
          SensorsPacket.getDescriptor();
        }
        
        // @@protoc_insertion_point(enum_scope:sensors_packet.BatteryPayload.BatteryStatusType)
      }
      
      // optional uint64 battery_level = 1;
      public static final int BATTERY_LEVEL_FIELD_NUMBER = 1;
      private boolean hasBatteryLevel;
      private long batteryLevel_ = 0L;
      public boolean hasBatteryLevel() { return hasBatteryLevel; }
      public long getBatteryLevel() { return batteryLevel_; }
      
      // optional uint64 battery_full = 2;
      public static final int BATTERY_FULL_FIELD_NUMBER = 2;
      private boolean hasBatteryFull;
      private long batteryFull_ = 0L;
      public boolean hasBatteryFull() { return hasBatteryFull; }
      public long getBatteryFull() { return batteryFull_; }
      
      // optional .sensors_packet.BatteryPayload.BatteryStatusType battery_status = 3 [default = CHARGING];
      public static final int BATTERY_STATUS_FIELD_NUMBER = 3;
      private boolean hasBatteryStatus;
      private SensorsPacket.sensors_packet.BatteryPayload.BatteryStatusType batteryStatus_;
      public boolean hasBatteryStatus() { return hasBatteryStatus; }
      public SensorsPacket.sensors_packet.BatteryPayload.BatteryStatusType getBatteryStatus() { return batteryStatus_; }
      
      // optional uint32 ac_online = 4;
      public static final int AC_ONLINE_FIELD_NUMBER = 4;
      private boolean hasAcOnline;
      private int acOnline_ = 0;
      public boolean hasAcOnline() { return hasAcOnline; }
      public int getAcOnline() { return acOnline_; }
      
      private void initFields() {
        batteryStatus_ = SensorsPacket.sensors_packet.BatteryPayload.BatteryStatusType.CHARGING;
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasBatteryLevel()) {
          output.writeUInt64(1, getBatteryLevel());
        }
        if (hasBatteryFull()) {
          output.writeUInt64(2, getBatteryFull());
        }
        if (hasBatteryStatus()) {
          output.writeEnum(3, getBatteryStatus().getNumber());
        }
        if (hasAcOnline()) {
          output.writeUInt32(4, getAcOnline());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasBatteryLevel()) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(1, getBatteryLevel());
        }
        if (hasBatteryFull()) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(2, getBatteryFull());
        }
        if (hasBatteryStatus()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(3, getBatteryStatus().getNumber());
        }
        if (hasAcOnline()) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(4, getAcOnline());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static SensorsPacket.sensors_packet.BatteryPayload parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.BatteryPayload parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.BatteryPayload parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.BatteryPayload parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.BatteryPayload parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.BatteryPayload parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.BatteryPayload parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.BatteryPayload parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.BatteryPayload parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.BatteryPayload parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(SensorsPacket.sensors_packet.BatteryPayload prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private SensorsPacket.sensors_packet.BatteryPayload result;
        
        // Construct using SensorsPacket.sensors_packet.BatteryPayload.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new SensorsPacket.sensors_packet.BatteryPayload();
          return builder;
        }
        
        protected SensorsPacket.sensors_packet.BatteryPayload internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new SensorsPacket.sensors_packet.BatteryPayload();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SensorsPacket.sensors_packet.BatteryPayload.getDescriptor();
        }
        
        public SensorsPacket.sensors_packet.BatteryPayload getDefaultInstanceForType() {
          return SensorsPacket.sensors_packet.BatteryPayload.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public SensorsPacket.sensors_packet.BatteryPayload build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private SensorsPacket.sensors_packet.BatteryPayload buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public SensorsPacket.sensors_packet.BatteryPayload buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          SensorsPacket.sensors_packet.BatteryPayload returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SensorsPacket.sensors_packet.BatteryPayload) {
            return mergeFrom((SensorsPacket.sensors_packet.BatteryPayload)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(SensorsPacket.sensors_packet.BatteryPayload other) {
          if (other == SensorsPacket.sensors_packet.BatteryPayload.getDefaultInstance()) return this;
          if (other.hasBatteryLevel()) {
            setBatteryLevel(other.getBatteryLevel());
          }
          if (other.hasBatteryFull()) {
            setBatteryFull(other.getBatteryFull());
          }
          if (other.hasBatteryStatus()) {
            setBatteryStatus(other.getBatteryStatus());
          }
          if (other.hasAcOnline()) {
            setAcOnline(other.getAcOnline());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 8: {
                setBatteryLevel(input.readUInt64());
                break;
              }
              case 16: {
                setBatteryFull(input.readUInt64());
                break;
              }
              case 24: {
                int rawValue = input.readEnum();
                SensorsPacket.sensors_packet.BatteryPayload.BatteryStatusType value = SensorsPacket.sensors_packet.BatteryPayload.BatteryStatusType.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(3, rawValue);
                } else {
                  setBatteryStatus(value);
                }
                break;
              }
              case 32: {
                setAcOnline(input.readUInt32());
                break;
              }
            }
          }
        }
        
        
        // optional uint64 battery_level = 1;
        public boolean hasBatteryLevel() {
          return result.hasBatteryLevel();
        }
        public long getBatteryLevel() {
          return result.getBatteryLevel();
        }
        public Builder setBatteryLevel(long value) {
          result.hasBatteryLevel = true;
          result.batteryLevel_ = value;
          return this;
        }
        public Builder clearBatteryLevel() {
          result.hasBatteryLevel = false;
          result.batteryLevel_ = 0L;
          return this;
        }
        
        // optional uint64 battery_full = 2;
        public boolean hasBatteryFull() {
          return result.hasBatteryFull();
        }
        public long getBatteryFull() {
          return result.getBatteryFull();
        }
        public Builder setBatteryFull(long value) {
          result.hasBatteryFull = true;
          result.batteryFull_ = value;
          return this;
        }
        public Builder clearBatteryFull() {
          result.hasBatteryFull = false;
          result.batteryFull_ = 0L;
          return this;
        }
        
        // optional .sensors_packet.BatteryPayload.BatteryStatusType battery_status = 3 [default = CHARGING];
        public boolean hasBatteryStatus() {
          return result.hasBatteryStatus();
        }
        public SensorsPacket.sensors_packet.BatteryPayload.BatteryStatusType getBatteryStatus() {
          return result.getBatteryStatus();
        }
        public Builder setBatteryStatus(SensorsPacket.sensors_packet.BatteryPayload.BatteryStatusType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          result.hasBatteryStatus = true;
          result.batteryStatus_ = value;
          return this;
        }
        public Builder clearBatteryStatus() {
          result.hasBatteryStatus = false;
          result.batteryStatus_ = SensorsPacket.sensors_packet.BatteryPayload.BatteryStatusType.CHARGING;
          return this;
        }
        
        // optional uint32 ac_online = 4;
        public boolean hasAcOnline() {
          return result.hasAcOnline();
        }
        public int getAcOnline() {
          return result.getAcOnline();
        }
        public Builder setAcOnline(int value) {
          result.hasAcOnline = true;
          result.acOnline_ = value;
          return this;
        }
        public Builder clearAcOnline() {
          result.hasAcOnline = false;
          result.acOnline_ = 0;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:sensors_packet.BatteryPayload)
      }
      
      static {
        defaultInstance = new BatteryPayload(true);
        SensorsPacket.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:sensors_packet.BatteryPayload)
    }
    
    public static final class GPSPayload extends
        com.google.protobuf.GeneratedMessage {
      // Use GPSPayload.newBuilder() to construct.
      private GPSPayload() {
        initFields();
      }
      private GPSPayload(boolean noInit) {}
      
      private static final GPSPayload defaultInstance;
      public static GPSPayload getDefaultInstance() {
        return defaultInstance;
      }
      
      public GPSPayload getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SensorsPacket.internal_static_sensors_packet_GPSPayload_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SensorsPacket.internal_static_sensors_packet_GPSPayload_fieldAccessorTable;
      }
      
      public enum GPSStatusType
          implements com.google.protobuf.ProtocolMessageEnum {
        DISABLED(0, 0),
        ENABLED(1, 1),
        ;
        
        
        public final int getNumber() { return value; }
        
        public static GPSStatusType valueOf(int value) {
          switch (value) {
            case 0: return DISABLED;
            case 1: return ENABLED;
            default: return null;
          }
        }
        
        public static com.google.protobuf.Internal.EnumLiteMap<GPSStatusType>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static com.google.protobuf.Internal.EnumLiteMap<GPSStatusType>
            internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<GPSStatusType>() {
                public GPSStatusType findValueByNumber(int number) {
                  return GPSStatusType.valueOf(number)
        ;        }
              };
        
        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(index);
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return SensorsPacket.sensors_packet.GPSPayload.getDescriptor().getEnumTypes().get(0);
        }
        
        private static final GPSStatusType[] VALUES = {
          DISABLED, ENABLED, 
        };
        public static GPSStatusType valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }
        private final int index;
        private final int value;
        private GPSStatusType(int index, int value) {
          this.index = index;
          this.value = value;
        }
        
        static {
          SensorsPacket.getDescriptor();
        }
        
        // @@protoc_insertion_point(enum_scope:sensors_packet.GPSPayload.GPSStatusType)
      }
      
      // optional .sensors_packet.GPSPayload.GPSStatusType status = 1 [default = ENABLED];
      public static final int STATUS_FIELD_NUMBER = 1;
      private boolean hasStatus;
      private SensorsPacket.sensors_packet.GPSPayload.GPSStatusType status_;
      public boolean hasStatus() { return hasStatus; }
      public SensorsPacket.sensors_packet.GPSPayload.GPSStatusType getStatus() { return status_; }
      
      // optional double latitude = 2;
      public static final int LATITUDE_FIELD_NUMBER = 2;
      private boolean hasLatitude;
      private double latitude_ = 0D;
      public boolean hasLatitude() { return hasLatitude; }
      public double getLatitude() { return latitude_; }
      
      // optional double longitude = 3;
      public static final int LONGITUDE_FIELD_NUMBER = 3;
      private boolean hasLongitude;
      private double longitude_ = 0D;
      public boolean hasLongitude() { return hasLongitude; }
      public double getLongitude() { return longitude_; }
      
      // optional double altitude = 4;
      public static final int ALTITUDE_FIELD_NUMBER = 4;
      private boolean hasAltitude;
      private double altitude_ = 0D;
      public boolean hasAltitude() { return hasAltitude; }
      public double getAltitude() { return altitude_; }
      
      // optional double bearing = 5;
      public static final int BEARING_FIELD_NUMBER = 5;
      private boolean hasBearing;
      private double bearing_ = 0D;
      public boolean hasBearing() { return hasBearing; }
      public double getBearing() { return bearing_; }
      
      private void initFields() {
        status_ = SensorsPacket.sensors_packet.GPSPayload.GPSStatusType.ENABLED;
      }
      public final boolean isInitialized() {
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (hasStatus()) {
          output.writeEnum(1, getStatus().getNumber());
        }
        if (hasLatitude()) {
          output.writeDouble(2, getLatitude());
        }
        if (hasLongitude()) {
          output.writeDouble(3, getLongitude());
        }
        if (hasAltitude()) {
          output.writeDouble(4, getAltitude());
        }
        if (hasBearing()) {
          output.writeDouble(5, getBearing());
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasStatus()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, getStatus().getNumber());
        }
        if (hasLatitude()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, getLatitude());
        }
        if (hasLongitude()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, getLongitude());
        }
        if (hasAltitude()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(4, getAltitude());
        }
        if (hasBearing()) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(5, getBearing());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      public static SensorsPacket.sensors_packet.GPSPayload parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.GPSPayload parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.GPSPayload parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static SensorsPacket.sensors_packet.GPSPayload parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.GPSPayload parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.GPSPayload parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static SensorsPacket.sensors_packet.GPSPayload parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.GPSPayload parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static SensorsPacket.sensors_packet.GPSPayload parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static SensorsPacket.sensors_packet.GPSPayload parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(SensorsPacket.sensors_packet.GPSPayload prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private SensorsPacket.sensors_packet.GPSPayload result;
        
        // Construct using SensorsPacket.sensors_packet.GPSPayload.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new SensorsPacket.sensors_packet.GPSPayload();
          return builder;
        }
        
        protected SensorsPacket.sensors_packet.GPSPayload internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new SensorsPacket.sensors_packet.GPSPayload();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SensorsPacket.sensors_packet.GPSPayload.getDescriptor();
        }
        
        public SensorsPacket.sensors_packet.GPSPayload getDefaultInstanceForType() {
          return SensorsPacket.sensors_packet.GPSPayload.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public SensorsPacket.sensors_packet.GPSPayload build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private SensorsPacket.sensors_packet.GPSPayload buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public SensorsPacket.sensors_packet.GPSPayload buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          SensorsPacket.sensors_packet.GPSPayload returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof SensorsPacket.sensors_packet.GPSPayload) {
            return mergeFrom((SensorsPacket.sensors_packet.GPSPayload)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(SensorsPacket.sensors_packet.GPSPayload other) {
          if (other == SensorsPacket.sensors_packet.GPSPayload.getDefaultInstance()) return this;
          if (other.hasStatus()) {
            setStatus(other.getStatus());
          }
          if (other.hasLatitude()) {
            setLatitude(other.getLatitude());
          }
          if (other.hasLongitude()) {
            setLongitude(other.getLongitude());
          }
          if (other.hasAltitude()) {
            setAltitude(other.getAltitude());
          }
          if (other.hasBearing()) {
            setBearing(other.getBearing());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  return this;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                SensorsPacket.sensors_packet.GPSPayload.GPSStatusType value = SensorsPacket.sensors_packet.GPSPayload.GPSStatusType.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  setStatus(value);
                }
                break;
              }
              case 17: {
                setLatitude(input.readDouble());
                break;
              }
              case 25: {
                setLongitude(input.readDouble());
                break;
              }
              case 33: {
                setAltitude(input.readDouble());
                break;
              }
              case 41: {
                setBearing(input.readDouble());
                break;
              }
            }
          }
        }
        
        
        // optional .sensors_packet.GPSPayload.GPSStatusType status = 1 [default = ENABLED];
        public boolean hasStatus() {
          return result.hasStatus();
        }
        public SensorsPacket.sensors_packet.GPSPayload.GPSStatusType getStatus() {
          return result.getStatus();
        }
        public Builder setStatus(SensorsPacket.sensors_packet.GPSPayload.GPSStatusType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          result.hasStatus = true;
          result.status_ = value;
          return this;
        }
        public Builder clearStatus() {
          result.hasStatus = false;
          result.status_ = SensorsPacket.sensors_packet.GPSPayload.GPSStatusType.ENABLED;
          return this;
        }
        
        // optional double latitude = 2;
        public boolean hasLatitude() {
          return result.hasLatitude();
        }
        public double getLatitude() {
          return result.getLatitude();
        }
        public Builder setLatitude(double value) {
          result.hasLatitude = true;
          result.latitude_ = value;
          return this;
        }
        public Builder clearLatitude() {
          result.hasLatitude = false;
          result.latitude_ = 0D;
          return this;
        }
        
        // optional double longitude = 3;
        public boolean hasLongitude() {
          return result.hasLongitude();
        }
        public double getLongitude() {
          return result.getLongitude();
        }
        public Builder setLongitude(double value) {
          result.hasLongitude = true;
          result.longitude_ = value;
          return this;
        }
        public Builder clearLongitude() {
          result.hasLongitude = false;
          result.longitude_ = 0D;
          return this;
        }
        
        // optional double altitude = 4;
        public boolean hasAltitude() {
          return result.hasAltitude();
        }
        public double getAltitude() {
          return result.getAltitude();
        }
        public Builder setAltitude(double value) {
          result.hasAltitude = true;
          result.altitude_ = value;
          return this;
        }
        public Builder clearAltitude() {
          result.hasAltitude = false;
          result.altitude_ = 0D;
          return this;
        }
        
        // optional double bearing = 5;
        public boolean hasBearing() {
          return result.hasBearing();
        }
        public double getBearing() {
          return result.getBearing();
        }
        public Builder setBearing(double value) {
          result.hasBearing = true;
          result.bearing_ = value;
          return this;
        }
        public Builder clearBearing() {
          result.hasBearing = false;
          result.bearing_ = 0D;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:sensors_packet.GPSPayload)
      }
      
      static {
        defaultInstance = new GPSPayload(true);
        SensorsPacket.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:sensors_packet.GPSPayload)
    }
    
    // optional .sensors_packet.SensorAccelerometerPayload sensor_accelerometer = 1;
    public static final int SENSOR_ACCELEROMETER_FIELD_NUMBER = 1;
    private boolean hasSensorAccelerometer;
    private SensorsPacket.sensors_packet.SensorAccelerometerPayload sensorAccelerometer_;
    public boolean hasSensorAccelerometer() { return hasSensorAccelerometer; }
    public SensorsPacket.sensors_packet.SensorAccelerometerPayload getSensorAccelerometer() { return sensorAccelerometer_; }
    
    // optional .sensors_packet.SensorMagnetometerPayload sensor_magnetometer = 2;
    public static final int SENSOR_MAGNETOMETER_FIELD_NUMBER = 2;
    private boolean hasSensorMagnetometer;
    private SensorsPacket.sensors_packet.SensorMagnetometerPayload sensorMagnetometer_;
    public boolean hasSensorMagnetometer() { return hasSensorMagnetometer; }
    public SensorsPacket.sensors_packet.SensorMagnetometerPayload getSensorMagnetometer() { return sensorMagnetometer_; }
    
    // optional .sensors_packet.SensorOrientationPayload sensor_orientation = 3;
    public static final int SENSOR_ORIENTATION_FIELD_NUMBER = 3;
    private boolean hasSensorOrientation;
    private SensorsPacket.sensors_packet.SensorOrientationPayload sensorOrientation_;
    public boolean hasSensorOrientation() { return hasSensorOrientation; }
    public SensorsPacket.sensors_packet.SensorOrientationPayload getSensorOrientation() { return sensorOrientation_; }
    
    // optional .sensors_packet.SensorGyroscopePayload sensor_gyroscope = 4;
    public static final int SENSOR_GYROSCOPE_FIELD_NUMBER = 4;
    private boolean hasSensorGyroscope;
    private SensorsPacket.sensors_packet.SensorGyroscopePayload sensorGyroscope_;
    public boolean hasSensorGyroscope() { return hasSensorGyroscope; }
    public SensorsPacket.sensors_packet.SensorGyroscopePayload getSensorGyroscope() { return sensorGyroscope_; }
    
    // optional .sensors_packet.SensorGravityPayload sensor_gravity = 5;
    public static final int SENSOR_GRAVITY_FIELD_NUMBER = 5;
    private boolean hasSensorGravity;
    private SensorsPacket.sensors_packet.SensorGravityPayload sensorGravity_;
    public boolean hasSensorGravity() { return hasSensorGravity; }
    public SensorsPacket.sensors_packet.SensorGravityPayload getSensorGravity() { return sensorGravity_; }
    
    // optional .sensors_packet.SensorLinearAccPayload sensor_linear_acc = 6;
    public static final int SENSOR_LINEAR_ACC_FIELD_NUMBER = 6;
    private boolean hasSensorLinearAcc;
    private SensorsPacket.sensors_packet.SensorLinearAccPayload sensorLinearAcc_;
    public boolean hasSensorLinearAcc() { return hasSensorLinearAcc; }
    public SensorsPacket.sensors_packet.SensorLinearAccPayload getSensorLinearAcc() { return sensorLinearAcc_; }
    
    // optional .sensors_packet.SensorRotVectorPayload sensor_rot_vector = 7;
    public static final int SENSOR_ROT_VECTOR_FIELD_NUMBER = 7;
    private boolean hasSensorRotVector;
    private SensorsPacket.sensors_packet.SensorRotVectorPayload sensorRotVector_;
    public boolean hasSensorRotVector() { return hasSensorRotVector; }
    public SensorsPacket.sensors_packet.SensorRotVectorPayload getSensorRotVector() { return sensorRotVector_; }
    
    // optional .sensors_packet.SensorTemperaturePayload sensor_temperature = 8;
    public static final int SENSOR_TEMPERATURE_FIELD_NUMBER = 8;
    private boolean hasSensorTemperature;
    private SensorsPacket.sensors_packet.SensorTemperaturePayload sensorTemperature_;
    public boolean hasSensorTemperature() { return hasSensorTemperature; }
    public SensorsPacket.sensors_packet.SensorTemperaturePayload getSensorTemperature() { return sensorTemperature_; }
    
    // optional .sensors_packet.SensorProximityPayload sensor_proximity = 9;
    public static final int SENSOR_PROXIMITY_FIELD_NUMBER = 9;
    private boolean hasSensorProximity;
    private SensorsPacket.sensors_packet.SensorProximityPayload sensorProximity_;
    public boolean hasSensorProximity() { return hasSensorProximity; }
    public SensorsPacket.sensors_packet.SensorProximityPayload getSensorProximity() { return sensorProximity_; }
    
    // optional .sensors_packet.SensorLightPayload sensor_light = 10;
    public static final int SENSOR_LIGHT_FIELD_NUMBER = 10;
    private boolean hasSensorLight;
    private SensorsPacket.sensors_packet.SensorLightPayload sensorLight_;
    public boolean hasSensorLight() { return hasSensorLight; }
    public SensorsPacket.sensors_packet.SensorLightPayload getSensorLight() { return sensorLight_; }
    
    // optional .sensors_packet.SensorPressurePayload sensor_pressure = 11;
    public static final int SENSOR_PRESSURE_FIELD_NUMBER = 11;
    private boolean hasSensorPressure;
    private SensorsPacket.sensors_packet.SensorPressurePayload sensorPressure_;
    public boolean hasSensorPressure() { return hasSensorPressure; }
    public SensorsPacket.sensors_packet.SensorPressurePayload getSensorPressure() { return sensorPressure_; }
    
    // optional .sensors_packet.SensorRelativeHumidityPayload sensor_relative_humidity = 12;
    public static final int SENSOR_RELATIVE_HUMIDITY_FIELD_NUMBER = 12;
    private boolean hasSensorRelativeHumidity;
    private SensorsPacket.sensors_packet.SensorRelativeHumidityPayload sensorRelativeHumidity_;
    public boolean hasSensorRelativeHumidity() { return hasSensorRelativeHumidity; }
    public SensorsPacket.sensors_packet.SensorRelativeHumidityPayload getSensorRelativeHumidity() { return sensorRelativeHumidity_; }
    
    // optional .sensors_packet.BatteryPayload battery = 100;
    public static final int BATTERY_FIELD_NUMBER = 100;
    private boolean hasBattery;
    private SensorsPacket.sensors_packet.BatteryPayload battery_;
    public boolean hasBattery() { return hasBattery; }
    public SensorsPacket.sensors_packet.BatteryPayload getBattery() { return battery_; }
    
    // optional .sensors_packet.GPSPayload gps = 200;
    public static final int GPS_FIELD_NUMBER = 200;
    private boolean hasGps;
    private SensorsPacket.sensors_packet.GPSPayload gps_;
    public boolean hasGps() { return hasGps; }
    public SensorsPacket.sensors_packet.GPSPayload getGps() { return gps_; }
    
    private void initFields() {
      sensorAccelerometer_ = SensorsPacket.sensors_packet.SensorAccelerometerPayload.getDefaultInstance();
      sensorMagnetometer_ = SensorsPacket.sensors_packet.SensorMagnetometerPayload.getDefaultInstance();
      sensorOrientation_ = SensorsPacket.sensors_packet.SensorOrientationPayload.getDefaultInstance();
      sensorGyroscope_ = SensorsPacket.sensors_packet.SensorGyroscopePayload.getDefaultInstance();
      sensorGravity_ = SensorsPacket.sensors_packet.SensorGravityPayload.getDefaultInstance();
      sensorLinearAcc_ = SensorsPacket.sensors_packet.SensorLinearAccPayload.getDefaultInstance();
      sensorRotVector_ = SensorsPacket.sensors_packet.SensorRotVectorPayload.getDefaultInstance();
      sensorTemperature_ = SensorsPacket.sensors_packet.SensorTemperaturePayload.getDefaultInstance();
      sensorProximity_ = SensorsPacket.sensors_packet.SensorProximityPayload.getDefaultInstance();
      sensorLight_ = SensorsPacket.sensors_packet.SensorLightPayload.getDefaultInstance();
      sensorPressure_ = SensorsPacket.sensors_packet.SensorPressurePayload.getDefaultInstance();
      sensorRelativeHumidity_ = SensorsPacket.sensors_packet.SensorRelativeHumidityPayload.getDefaultInstance();
      battery_ = SensorsPacket.sensors_packet.BatteryPayload.getDefaultInstance();
      gps_ = SensorsPacket.sensors_packet.GPSPayload.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSensorAccelerometer()) {
        output.writeMessage(1, getSensorAccelerometer());
      }
      if (hasSensorMagnetometer()) {
        output.writeMessage(2, getSensorMagnetometer());
      }
      if (hasSensorOrientation()) {
        output.writeMessage(3, getSensorOrientation());
      }
      if (hasSensorGyroscope()) {
        output.writeMessage(4, getSensorGyroscope());
      }
      if (hasSensorGravity()) {
        output.writeMessage(5, getSensorGravity());
      }
      if (hasSensorLinearAcc()) {
        output.writeMessage(6, getSensorLinearAcc());
      }
      if (hasSensorRotVector()) {
        output.writeMessage(7, getSensorRotVector());
      }
      if (hasSensorTemperature()) {
        output.writeMessage(8, getSensorTemperature());
      }
      if (hasSensorProximity()) {
        output.writeMessage(9, getSensorProximity());
      }
      if (hasSensorLight()) {
        output.writeMessage(10, getSensorLight());
      }
      if (hasSensorPressure()) {
        output.writeMessage(11, getSensorPressure());
      }
      if (hasSensorRelativeHumidity()) {
        output.writeMessage(12, getSensorRelativeHumidity());
      }
      if (hasBattery()) {
        output.writeMessage(100, getBattery());
      }
      if (hasGps()) {
        output.writeMessage(200, getGps());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSensorAccelerometer()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getSensorAccelerometer());
      }
      if (hasSensorMagnetometer()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getSensorMagnetometer());
      }
      if (hasSensorOrientation()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getSensorOrientation());
      }
      if (hasSensorGyroscope()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getSensorGyroscope());
      }
      if (hasSensorGravity()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getSensorGravity());
      }
      if (hasSensorLinearAcc()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getSensorLinearAcc());
      }
      if (hasSensorRotVector()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getSensorRotVector());
      }
      if (hasSensorTemperature()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getSensorTemperature());
      }
      if (hasSensorProximity()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getSensorProximity());
      }
      if (hasSensorLight()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getSensorLight());
      }
      if (hasSensorPressure()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getSensorPressure());
      }
      if (hasSensorRelativeHumidity()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getSensorRelativeHumidity());
      }
      if (hasBattery()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(100, getBattery());
      }
      if (hasGps()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(200, getGps());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static SensorsPacket.sensors_packet parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SensorsPacket.sensors_packet parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SensorsPacket.sensors_packet parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SensorsPacket.sensors_packet parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SensorsPacket.sensors_packet parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SensorsPacket.sensors_packet parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SensorsPacket.sensors_packet parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SensorsPacket.sensors_packet parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SensorsPacket.sensors_packet parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SensorsPacket.sensors_packet parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SensorsPacket.sensors_packet prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private SensorsPacket.sensors_packet result;
      
      // Construct using SensorsPacket.sensors_packet.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new SensorsPacket.sensors_packet();
        return builder;
      }
      
      protected SensorsPacket.sensors_packet internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new SensorsPacket.sensors_packet();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SensorsPacket.sensors_packet.getDescriptor();
      }
      
      public SensorsPacket.sensors_packet getDefaultInstanceForType() {
        return SensorsPacket.sensors_packet.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public SensorsPacket.sensors_packet build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private SensorsPacket.sensors_packet buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public SensorsPacket.sensors_packet buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        SensorsPacket.sensors_packet returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SensorsPacket.sensors_packet) {
          return mergeFrom((SensorsPacket.sensors_packet)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(SensorsPacket.sensors_packet other) {
        if (other == SensorsPacket.sensors_packet.getDefaultInstance()) return this;
        if (other.hasSensorAccelerometer()) {
          mergeSensorAccelerometer(other.getSensorAccelerometer());
        }
        if (other.hasSensorMagnetometer()) {
          mergeSensorMagnetometer(other.getSensorMagnetometer());
        }
        if (other.hasSensorOrientation()) {
          mergeSensorOrientation(other.getSensorOrientation());
        }
        if (other.hasSensorGyroscope()) {
          mergeSensorGyroscope(other.getSensorGyroscope());
        }
        if (other.hasSensorGravity()) {
          mergeSensorGravity(other.getSensorGravity());
        }
        if (other.hasSensorLinearAcc()) {
          mergeSensorLinearAcc(other.getSensorLinearAcc());
        }
        if (other.hasSensorRotVector()) {
          mergeSensorRotVector(other.getSensorRotVector());
        }
        if (other.hasSensorTemperature()) {
          mergeSensorTemperature(other.getSensorTemperature());
        }
        if (other.hasSensorProximity()) {
          mergeSensorProximity(other.getSensorProximity());
        }
        if (other.hasSensorLight()) {
          mergeSensorLight(other.getSensorLight());
        }
        if (other.hasSensorPressure()) {
          mergeSensorPressure(other.getSensorPressure());
        }
        if (other.hasSensorRelativeHumidity()) {
          mergeSensorRelativeHumidity(other.getSensorRelativeHumidity());
        }
        if (other.hasBattery()) {
          mergeBattery(other.getBattery());
        }
        if (other.hasGps()) {
          mergeGps(other.getGps());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              SensorsPacket.sensors_packet.SensorAccelerometerPayload.Builder subBuilder = SensorsPacket.sensors_packet.SensorAccelerometerPayload.newBuilder();
              if (hasSensorAccelerometer()) {
                subBuilder.mergeFrom(getSensorAccelerometer());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSensorAccelerometer(subBuilder.buildPartial());
              break;
            }
            case 18: {
              SensorsPacket.sensors_packet.SensorMagnetometerPayload.Builder subBuilder = SensorsPacket.sensors_packet.SensorMagnetometerPayload.newBuilder();
              if (hasSensorMagnetometer()) {
                subBuilder.mergeFrom(getSensorMagnetometer());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSensorMagnetometer(subBuilder.buildPartial());
              break;
            }
            case 26: {
              SensorsPacket.sensors_packet.SensorOrientationPayload.Builder subBuilder = SensorsPacket.sensors_packet.SensorOrientationPayload.newBuilder();
              if (hasSensorOrientation()) {
                subBuilder.mergeFrom(getSensorOrientation());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSensorOrientation(subBuilder.buildPartial());
              break;
            }
            case 34: {
              SensorsPacket.sensors_packet.SensorGyroscopePayload.Builder subBuilder = SensorsPacket.sensors_packet.SensorGyroscopePayload.newBuilder();
              if (hasSensorGyroscope()) {
                subBuilder.mergeFrom(getSensorGyroscope());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSensorGyroscope(subBuilder.buildPartial());
              break;
            }
            case 42: {
              SensorsPacket.sensors_packet.SensorGravityPayload.Builder subBuilder = SensorsPacket.sensors_packet.SensorGravityPayload.newBuilder();
              if (hasSensorGravity()) {
                subBuilder.mergeFrom(getSensorGravity());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSensorGravity(subBuilder.buildPartial());
              break;
            }
            case 50: {
              SensorsPacket.sensors_packet.SensorLinearAccPayload.Builder subBuilder = SensorsPacket.sensors_packet.SensorLinearAccPayload.newBuilder();
              if (hasSensorLinearAcc()) {
                subBuilder.mergeFrom(getSensorLinearAcc());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSensorLinearAcc(subBuilder.buildPartial());
              break;
            }
            case 58: {
              SensorsPacket.sensors_packet.SensorRotVectorPayload.Builder subBuilder = SensorsPacket.sensors_packet.SensorRotVectorPayload.newBuilder();
              if (hasSensorRotVector()) {
                subBuilder.mergeFrom(getSensorRotVector());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSensorRotVector(subBuilder.buildPartial());
              break;
            }
            case 66: {
              SensorsPacket.sensors_packet.SensorTemperaturePayload.Builder subBuilder = SensorsPacket.sensors_packet.SensorTemperaturePayload.newBuilder();
              if (hasSensorTemperature()) {
                subBuilder.mergeFrom(getSensorTemperature());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSensorTemperature(subBuilder.buildPartial());
              break;
            }
            case 74: {
              SensorsPacket.sensors_packet.SensorProximityPayload.Builder subBuilder = SensorsPacket.sensors_packet.SensorProximityPayload.newBuilder();
              if (hasSensorProximity()) {
                subBuilder.mergeFrom(getSensorProximity());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSensorProximity(subBuilder.buildPartial());
              break;
            }
            case 82: {
              SensorsPacket.sensors_packet.SensorLightPayload.Builder subBuilder = SensorsPacket.sensors_packet.SensorLightPayload.newBuilder();
              if (hasSensorLight()) {
                subBuilder.mergeFrom(getSensorLight());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSensorLight(subBuilder.buildPartial());
              break;
            }
            case 90: {
              SensorsPacket.sensors_packet.SensorPressurePayload.Builder subBuilder = SensorsPacket.sensors_packet.SensorPressurePayload.newBuilder();
              if (hasSensorPressure()) {
                subBuilder.mergeFrom(getSensorPressure());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSensorPressure(subBuilder.buildPartial());
              break;
            }
            case 98: {
              SensorsPacket.sensors_packet.SensorRelativeHumidityPayload.Builder subBuilder = SensorsPacket.sensors_packet.SensorRelativeHumidityPayload.newBuilder();
              if (hasSensorRelativeHumidity()) {
                subBuilder.mergeFrom(getSensorRelativeHumidity());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSensorRelativeHumidity(subBuilder.buildPartial());
              break;
            }
            case 802: {
              SensorsPacket.sensors_packet.BatteryPayload.Builder subBuilder = SensorsPacket.sensors_packet.BatteryPayload.newBuilder();
              if (hasBattery()) {
                subBuilder.mergeFrom(getBattery());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setBattery(subBuilder.buildPartial());
              break;
            }
            case 1602: {
              SensorsPacket.sensors_packet.GPSPayload.Builder subBuilder = SensorsPacket.sensors_packet.GPSPayload.newBuilder();
              if (hasGps()) {
                subBuilder.mergeFrom(getGps());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGps(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional .sensors_packet.SensorAccelerometerPayload sensor_accelerometer = 1;
      public boolean hasSensorAccelerometer() {
        return result.hasSensorAccelerometer();
      }
      public SensorsPacket.sensors_packet.SensorAccelerometerPayload getSensorAccelerometer() {
        return result.getSensorAccelerometer();
      }
      public Builder setSensorAccelerometer(SensorsPacket.sensors_packet.SensorAccelerometerPayload value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSensorAccelerometer = true;
        result.sensorAccelerometer_ = value;
        return this;
      }
      public Builder setSensorAccelerometer(SensorsPacket.sensors_packet.SensorAccelerometerPayload.Builder builderForValue) {
        result.hasSensorAccelerometer = true;
        result.sensorAccelerometer_ = builderForValue.build();
        return this;
      }
      public Builder mergeSensorAccelerometer(SensorsPacket.sensors_packet.SensorAccelerometerPayload value) {
        if (result.hasSensorAccelerometer() &&
            result.sensorAccelerometer_ != SensorsPacket.sensors_packet.SensorAccelerometerPayload.getDefaultInstance()) {
          result.sensorAccelerometer_ =
            SensorsPacket.sensors_packet.SensorAccelerometerPayload.newBuilder(result.sensorAccelerometer_).mergeFrom(value).buildPartial();
        } else {
          result.sensorAccelerometer_ = value;
        }
        result.hasSensorAccelerometer = true;
        return this;
      }
      public Builder clearSensorAccelerometer() {
        result.hasSensorAccelerometer = false;
        result.sensorAccelerometer_ = SensorsPacket.sensors_packet.SensorAccelerometerPayload.getDefaultInstance();
        return this;
      }
      
      // optional .sensors_packet.SensorMagnetometerPayload sensor_magnetometer = 2;
      public boolean hasSensorMagnetometer() {
        return result.hasSensorMagnetometer();
      }
      public SensorsPacket.sensors_packet.SensorMagnetometerPayload getSensorMagnetometer() {
        return result.getSensorMagnetometer();
      }
      public Builder setSensorMagnetometer(SensorsPacket.sensors_packet.SensorMagnetometerPayload value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSensorMagnetometer = true;
        result.sensorMagnetometer_ = value;
        return this;
      }
      public Builder setSensorMagnetometer(SensorsPacket.sensors_packet.SensorMagnetometerPayload.Builder builderForValue) {
        result.hasSensorMagnetometer = true;
        result.sensorMagnetometer_ = builderForValue.build();
        return this;
      }
      public Builder mergeSensorMagnetometer(SensorsPacket.sensors_packet.SensorMagnetometerPayload value) {
        if (result.hasSensorMagnetometer() &&
            result.sensorMagnetometer_ != SensorsPacket.sensors_packet.SensorMagnetometerPayload.getDefaultInstance()) {
          result.sensorMagnetometer_ =
            SensorsPacket.sensors_packet.SensorMagnetometerPayload.newBuilder(result.sensorMagnetometer_).mergeFrom(value).buildPartial();
        } else {
          result.sensorMagnetometer_ = value;
        }
        result.hasSensorMagnetometer = true;
        return this;
      }
      public Builder clearSensorMagnetometer() {
        result.hasSensorMagnetometer = false;
        result.sensorMagnetometer_ = SensorsPacket.sensors_packet.SensorMagnetometerPayload.getDefaultInstance();
        return this;
      }
      
      // optional .sensors_packet.SensorOrientationPayload sensor_orientation = 3;
      public boolean hasSensorOrientation() {
        return result.hasSensorOrientation();
      }
      public SensorsPacket.sensors_packet.SensorOrientationPayload getSensorOrientation() {
        return result.getSensorOrientation();
      }
      public Builder setSensorOrientation(SensorsPacket.sensors_packet.SensorOrientationPayload value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSensorOrientation = true;
        result.sensorOrientation_ = value;
        return this;
      }
      public Builder setSensorOrientation(SensorsPacket.sensors_packet.SensorOrientationPayload.Builder builderForValue) {
        result.hasSensorOrientation = true;
        result.sensorOrientation_ = builderForValue.build();
        return this;
      }
      public Builder mergeSensorOrientation(SensorsPacket.sensors_packet.SensorOrientationPayload value) {
        if (result.hasSensorOrientation() &&
            result.sensorOrientation_ != SensorsPacket.sensors_packet.SensorOrientationPayload.getDefaultInstance()) {
          result.sensorOrientation_ =
            SensorsPacket.sensors_packet.SensorOrientationPayload.newBuilder(result.sensorOrientation_).mergeFrom(value).buildPartial();
        } else {
          result.sensorOrientation_ = value;
        }
        result.hasSensorOrientation = true;
        return this;
      }
      public Builder clearSensorOrientation() {
        result.hasSensorOrientation = false;
        result.sensorOrientation_ = SensorsPacket.sensors_packet.SensorOrientationPayload.getDefaultInstance();
        return this;
      }
      
      // optional .sensors_packet.SensorGyroscopePayload sensor_gyroscope = 4;
      public boolean hasSensorGyroscope() {
        return result.hasSensorGyroscope();
      }
      public SensorsPacket.sensors_packet.SensorGyroscopePayload getSensorGyroscope() {
        return result.getSensorGyroscope();
      }
      public Builder setSensorGyroscope(SensorsPacket.sensors_packet.SensorGyroscopePayload value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSensorGyroscope = true;
        result.sensorGyroscope_ = value;
        return this;
      }
      public Builder setSensorGyroscope(SensorsPacket.sensors_packet.SensorGyroscopePayload.Builder builderForValue) {
        result.hasSensorGyroscope = true;
        result.sensorGyroscope_ = builderForValue.build();
        return this;
      }
      public Builder mergeSensorGyroscope(SensorsPacket.sensors_packet.SensorGyroscopePayload value) {
        if (result.hasSensorGyroscope() &&
            result.sensorGyroscope_ != SensorsPacket.sensors_packet.SensorGyroscopePayload.getDefaultInstance()) {
          result.sensorGyroscope_ =
            SensorsPacket.sensors_packet.SensorGyroscopePayload.newBuilder(result.sensorGyroscope_).mergeFrom(value).buildPartial();
        } else {
          result.sensorGyroscope_ = value;
        }
        result.hasSensorGyroscope = true;
        return this;
      }
      public Builder clearSensorGyroscope() {
        result.hasSensorGyroscope = false;
        result.sensorGyroscope_ = SensorsPacket.sensors_packet.SensorGyroscopePayload.getDefaultInstance();
        return this;
      }
      
      // optional .sensors_packet.SensorGravityPayload sensor_gravity = 5;
      public boolean hasSensorGravity() {
        return result.hasSensorGravity();
      }
      public SensorsPacket.sensors_packet.SensorGravityPayload getSensorGravity() {
        return result.getSensorGravity();
      }
      public Builder setSensorGravity(SensorsPacket.sensors_packet.SensorGravityPayload value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSensorGravity = true;
        result.sensorGravity_ = value;
        return this;
      }
      public Builder setSensorGravity(SensorsPacket.sensors_packet.SensorGravityPayload.Builder builderForValue) {
        result.hasSensorGravity = true;
        result.sensorGravity_ = builderForValue.build();
        return this;
      }
      public Builder mergeSensorGravity(SensorsPacket.sensors_packet.SensorGravityPayload value) {
        if (result.hasSensorGravity() &&
            result.sensorGravity_ != SensorsPacket.sensors_packet.SensorGravityPayload.getDefaultInstance()) {
          result.sensorGravity_ =
            SensorsPacket.sensors_packet.SensorGravityPayload.newBuilder(result.sensorGravity_).mergeFrom(value).buildPartial();
        } else {
          result.sensorGravity_ = value;
        }
        result.hasSensorGravity = true;
        return this;
      }
      public Builder clearSensorGravity() {
        result.hasSensorGravity = false;
        result.sensorGravity_ = SensorsPacket.sensors_packet.SensorGravityPayload.getDefaultInstance();
        return this;
      }
      
      // optional .sensors_packet.SensorLinearAccPayload sensor_linear_acc = 6;
      public boolean hasSensorLinearAcc() {
        return result.hasSensorLinearAcc();
      }
      public SensorsPacket.sensors_packet.SensorLinearAccPayload getSensorLinearAcc() {
        return result.getSensorLinearAcc();
      }
      public Builder setSensorLinearAcc(SensorsPacket.sensors_packet.SensorLinearAccPayload value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSensorLinearAcc = true;
        result.sensorLinearAcc_ = value;
        return this;
      }
      public Builder setSensorLinearAcc(SensorsPacket.sensors_packet.SensorLinearAccPayload.Builder builderForValue) {
        result.hasSensorLinearAcc = true;
        result.sensorLinearAcc_ = builderForValue.build();
        return this;
      }
      public Builder mergeSensorLinearAcc(SensorsPacket.sensors_packet.SensorLinearAccPayload value) {
        if (result.hasSensorLinearAcc() &&
            result.sensorLinearAcc_ != SensorsPacket.sensors_packet.SensorLinearAccPayload.getDefaultInstance()) {
          result.sensorLinearAcc_ =
            SensorsPacket.sensors_packet.SensorLinearAccPayload.newBuilder(result.sensorLinearAcc_).mergeFrom(value).buildPartial();
        } else {
          result.sensorLinearAcc_ = value;
        }
        result.hasSensorLinearAcc = true;
        return this;
      }
      public Builder clearSensorLinearAcc() {
        result.hasSensorLinearAcc = false;
        result.sensorLinearAcc_ = SensorsPacket.sensors_packet.SensorLinearAccPayload.getDefaultInstance();
        return this;
      }
      
      // optional .sensors_packet.SensorRotVectorPayload sensor_rot_vector = 7;
      public boolean hasSensorRotVector() {
        return result.hasSensorRotVector();
      }
      public SensorsPacket.sensors_packet.SensorRotVectorPayload getSensorRotVector() {
        return result.getSensorRotVector();
      }
      public Builder setSensorRotVector(SensorsPacket.sensors_packet.SensorRotVectorPayload value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSensorRotVector = true;
        result.sensorRotVector_ = value;
        return this;
      }
      public Builder setSensorRotVector(SensorsPacket.sensors_packet.SensorRotVectorPayload.Builder builderForValue) {
        result.hasSensorRotVector = true;
        result.sensorRotVector_ = builderForValue.build();
        return this;
      }
      public Builder mergeSensorRotVector(SensorsPacket.sensors_packet.SensorRotVectorPayload value) {
        if (result.hasSensorRotVector() &&
            result.sensorRotVector_ != SensorsPacket.sensors_packet.SensorRotVectorPayload.getDefaultInstance()) {
          result.sensorRotVector_ =
            SensorsPacket.sensors_packet.SensorRotVectorPayload.newBuilder(result.sensorRotVector_).mergeFrom(value).buildPartial();
        } else {
          result.sensorRotVector_ = value;
        }
        result.hasSensorRotVector = true;
        return this;
      }
      public Builder clearSensorRotVector() {
        result.hasSensorRotVector = false;
        result.sensorRotVector_ = SensorsPacket.sensors_packet.SensorRotVectorPayload.getDefaultInstance();
        return this;
      }
      
      // optional .sensors_packet.SensorTemperaturePayload sensor_temperature = 8;
      public boolean hasSensorTemperature() {
        return result.hasSensorTemperature();
      }
      public SensorsPacket.sensors_packet.SensorTemperaturePayload getSensorTemperature() {
        return result.getSensorTemperature();
      }
      public Builder setSensorTemperature(SensorsPacket.sensors_packet.SensorTemperaturePayload value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSensorTemperature = true;
        result.sensorTemperature_ = value;
        return this;
      }
      public Builder setSensorTemperature(SensorsPacket.sensors_packet.SensorTemperaturePayload.Builder builderForValue) {
        result.hasSensorTemperature = true;
        result.sensorTemperature_ = builderForValue.build();
        return this;
      }
      public Builder mergeSensorTemperature(SensorsPacket.sensors_packet.SensorTemperaturePayload value) {
        if (result.hasSensorTemperature() &&
            result.sensorTemperature_ != SensorsPacket.sensors_packet.SensorTemperaturePayload.getDefaultInstance()) {
          result.sensorTemperature_ =
            SensorsPacket.sensors_packet.SensorTemperaturePayload.newBuilder(result.sensorTemperature_).mergeFrom(value).buildPartial();
        } else {
          result.sensorTemperature_ = value;
        }
        result.hasSensorTemperature = true;
        return this;
      }
      public Builder clearSensorTemperature() {
        result.hasSensorTemperature = false;
        result.sensorTemperature_ = SensorsPacket.sensors_packet.SensorTemperaturePayload.getDefaultInstance();
        return this;
      }
      
      // optional .sensors_packet.SensorProximityPayload sensor_proximity = 9;
      public boolean hasSensorProximity() {
        return result.hasSensorProximity();
      }
      public SensorsPacket.sensors_packet.SensorProximityPayload getSensorProximity() {
        return result.getSensorProximity();
      }
      public Builder setSensorProximity(SensorsPacket.sensors_packet.SensorProximityPayload value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSensorProximity = true;
        result.sensorProximity_ = value;
        return this;
      }
      public Builder setSensorProximity(SensorsPacket.sensors_packet.SensorProximityPayload.Builder builderForValue) {
        result.hasSensorProximity = true;
        result.sensorProximity_ = builderForValue.build();
        return this;
      }
      public Builder mergeSensorProximity(SensorsPacket.sensors_packet.SensorProximityPayload value) {
        if (result.hasSensorProximity() &&
            result.sensorProximity_ != SensorsPacket.sensors_packet.SensorProximityPayload.getDefaultInstance()) {
          result.sensorProximity_ =
            SensorsPacket.sensors_packet.SensorProximityPayload.newBuilder(result.sensorProximity_).mergeFrom(value).buildPartial();
        } else {
          result.sensorProximity_ = value;
        }
        result.hasSensorProximity = true;
        return this;
      }
      public Builder clearSensorProximity() {
        result.hasSensorProximity = false;
        result.sensorProximity_ = SensorsPacket.sensors_packet.SensorProximityPayload.getDefaultInstance();
        return this;
      }
      
      // optional .sensors_packet.SensorLightPayload sensor_light = 10;
      public boolean hasSensorLight() {
        return result.hasSensorLight();
      }
      public SensorsPacket.sensors_packet.SensorLightPayload getSensorLight() {
        return result.getSensorLight();
      }
      public Builder setSensorLight(SensorsPacket.sensors_packet.SensorLightPayload value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSensorLight = true;
        result.sensorLight_ = value;
        return this;
      }
      public Builder setSensorLight(SensorsPacket.sensors_packet.SensorLightPayload.Builder builderForValue) {
        result.hasSensorLight = true;
        result.sensorLight_ = builderForValue.build();
        return this;
      }
      public Builder mergeSensorLight(SensorsPacket.sensors_packet.SensorLightPayload value) {
        if (result.hasSensorLight() &&
            result.sensorLight_ != SensorsPacket.sensors_packet.SensorLightPayload.getDefaultInstance()) {
          result.sensorLight_ =
            SensorsPacket.sensors_packet.SensorLightPayload.newBuilder(result.sensorLight_).mergeFrom(value).buildPartial();
        } else {
          result.sensorLight_ = value;
        }
        result.hasSensorLight = true;
        return this;
      }
      public Builder clearSensorLight() {
        result.hasSensorLight = false;
        result.sensorLight_ = SensorsPacket.sensors_packet.SensorLightPayload.getDefaultInstance();
        return this;
      }
      
      // optional .sensors_packet.SensorPressurePayload sensor_pressure = 11;
      public boolean hasSensorPressure() {
        return result.hasSensorPressure();
      }
      public SensorsPacket.sensors_packet.SensorPressurePayload getSensorPressure() {
        return result.getSensorPressure();
      }
      public Builder setSensorPressure(SensorsPacket.sensors_packet.SensorPressurePayload value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSensorPressure = true;
        result.sensorPressure_ = value;
        return this;
      }
      public Builder setSensorPressure(SensorsPacket.sensors_packet.SensorPressurePayload.Builder builderForValue) {
        result.hasSensorPressure = true;
        result.sensorPressure_ = builderForValue.build();
        return this;
      }
      public Builder mergeSensorPressure(SensorsPacket.sensors_packet.SensorPressurePayload value) {
        if (result.hasSensorPressure() &&
            result.sensorPressure_ != SensorsPacket.sensors_packet.SensorPressurePayload.getDefaultInstance()) {
          result.sensorPressure_ =
            SensorsPacket.sensors_packet.SensorPressurePayload.newBuilder(result.sensorPressure_).mergeFrom(value).buildPartial();
        } else {
          result.sensorPressure_ = value;
        }
        result.hasSensorPressure = true;
        return this;
      }
      public Builder clearSensorPressure() {
        result.hasSensorPressure = false;
        result.sensorPressure_ = SensorsPacket.sensors_packet.SensorPressurePayload.getDefaultInstance();
        return this;
      }
      
      // optional .sensors_packet.SensorRelativeHumidityPayload sensor_relative_humidity = 12;
      public boolean hasSensorRelativeHumidity() {
        return result.hasSensorRelativeHumidity();
      }
      public SensorsPacket.sensors_packet.SensorRelativeHumidityPayload getSensorRelativeHumidity() {
        return result.getSensorRelativeHumidity();
      }
      public Builder setSensorRelativeHumidity(SensorsPacket.sensors_packet.SensorRelativeHumidityPayload value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSensorRelativeHumidity = true;
        result.sensorRelativeHumidity_ = value;
        return this;
      }
      public Builder setSensorRelativeHumidity(SensorsPacket.sensors_packet.SensorRelativeHumidityPayload.Builder builderForValue) {
        result.hasSensorRelativeHumidity = true;
        result.sensorRelativeHumidity_ = builderForValue.build();
        return this;
      }
      public Builder mergeSensorRelativeHumidity(SensorsPacket.sensors_packet.SensorRelativeHumidityPayload value) {
        if (result.hasSensorRelativeHumidity() &&
            result.sensorRelativeHumidity_ != SensorsPacket.sensors_packet.SensorRelativeHumidityPayload.getDefaultInstance()) {
          result.sensorRelativeHumidity_ =
            SensorsPacket.sensors_packet.SensorRelativeHumidityPayload.newBuilder(result.sensorRelativeHumidity_).mergeFrom(value).buildPartial();
        } else {
          result.sensorRelativeHumidity_ = value;
        }
        result.hasSensorRelativeHumidity = true;
        return this;
      }
      public Builder clearSensorRelativeHumidity() {
        result.hasSensorRelativeHumidity = false;
        result.sensorRelativeHumidity_ = SensorsPacket.sensors_packet.SensorRelativeHumidityPayload.getDefaultInstance();
        return this;
      }
      
      // optional .sensors_packet.BatteryPayload battery = 100;
      public boolean hasBattery() {
        return result.hasBattery();
      }
      public SensorsPacket.sensors_packet.BatteryPayload getBattery() {
        return result.getBattery();
      }
      public Builder setBattery(SensorsPacket.sensors_packet.BatteryPayload value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasBattery = true;
        result.battery_ = value;
        return this;
      }
      public Builder setBattery(SensorsPacket.sensors_packet.BatteryPayload.Builder builderForValue) {
        result.hasBattery = true;
        result.battery_ = builderForValue.build();
        return this;
      }
      public Builder mergeBattery(SensorsPacket.sensors_packet.BatteryPayload value) {
        if (result.hasBattery() &&
            result.battery_ != SensorsPacket.sensors_packet.BatteryPayload.getDefaultInstance()) {
          result.battery_ =
            SensorsPacket.sensors_packet.BatteryPayload.newBuilder(result.battery_).mergeFrom(value).buildPartial();
        } else {
          result.battery_ = value;
        }
        result.hasBattery = true;
        return this;
      }
      public Builder clearBattery() {
        result.hasBattery = false;
        result.battery_ = SensorsPacket.sensors_packet.BatteryPayload.getDefaultInstance();
        return this;
      }
      
      // optional .sensors_packet.GPSPayload gps = 200;
      public boolean hasGps() {
        return result.hasGps();
      }
      public SensorsPacket.sensors_packet.GPSPayload getGps() {
        return result.getGps();
      }
      public Builder setGps(SensorsPacket.sensors_packet.GPSPayload value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasGps = true;
        result.gps_ = value;
        return this;
      }
      public Builder setGps(SensorsPacket.sensors_packet.GPSPayload.Builder builderForValue) {
        result.hasGps = true;
        result.gps_ = builderForValue.build();
        return this;
      }
      public Builder mergeGps(SensorsPacket.sensors_packet.GPSPayload value) {
        if (result.hasGps() &&
            result.gps_ != SensorsPacket.sensors_packet.GPSPayload.getDefaultInstance()) {
          result.gps_ =
            SensorsPacket.sensors_packet.GPSPayload.newBuilder(result.gps_).mergeFrom(value).buildPartial();
        } else {
          result.gps_ = value;
        }
        result.hasGps = true;
        return this;
      }
      public Builder clearGps() {
        result.hasGps = false;
        result.gps_ = SensorsPacket.sensors_packet.GPSPayload.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:sensors_packet)
    }
    
    static {
      defaultInstance = new sensors_packet(true);
      SensorsPacket.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:sensors_packet)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sensors_packet_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sensors_packet_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sensors_packet_SensorAccelerometerPayload_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sensors_packet_SensorAccelerometerPayload_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sensors_packet_SensorMagnetometerPayload_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sensors_packet_SensorMagnetometerPayload_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sensors_packet_SensorOrientationPayload_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sensors_packet_SensorOrientationPayload_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sensors_packet_SensorGyroscopePayload_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sensors_packet_SensorGyroscopePayload_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sensors_packet_SensorGravityPayload_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sensors_packet_SensorGravityPayload_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sensors_packet_SensorLinearAccPayload_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sensors_packet_SensorLinearAccPayload_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sensors_packet_SensorRotVectorPayload_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sensors_packet_SensorRotVectorPayload_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sensors_packet_SensorTemperaturePayload_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sensors_packet_SensorTemperaturePayload_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sensors_packet_SensorProximityPayload_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sensors_packet_SensorProximityPayload_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sensors_packet_SensorLightPayload_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sensors_packet_SensorLightPayload_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sensors_packet_SensorPressurePayload_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sensors_packet_SensorPressurePayload_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sensors_packet_SensorRelativeHumidityPayload_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sensors_packet_SensorRelativeHumidityPayload_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sensors_packet_BatteryPayload_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sensors_packet_BatteryPayload_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sensors_packet_GPSPayload_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sensors_packet_GPSPayload_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024sensors_packet.proto\"\213\020\n\016sensors_packe" +
      "t\022H\n\024sensor_accelerometer\030\001 \001(\0132*.sensor" +
      "s_packet.SensorAccelerometerPayload\022F\n\023s" +
      "ensor_magnetometer\030\002 \001(\0132).sensors_packe" +
      "t.SensorMagnetometerPayload\022D\n\022sensor_or" +
      "ientation\030\003 \001(\0132(.sensors_packet.SensorO" +
      "rientationPayload\022@\n\020sensor_gyroscope\030\004 " +
      "\001(\0132&.sensors_packet.SensorGyroscopePayl" +
      "oad\022<\n\016sensor_gravity\030\005 \001(\0132$.sensors_pa" +
      "cket.SensorGravityPayload\022A\n\021sensor_line",
      "ar_acc\030\006 \001(\0132&.sensors_packet.SensorLine" +
      "arAccPayload\022A\n\021sensor_rot_vector\030\007 \001(\0132" +
      "&.sensors_packet.SensorRotVectorPayload\022" +
      "D\n\022sensor_temperature\030\010 \001(\0132(.sensors_pa" +
      "cket.SensorTemperaturePayload\022@\n\020sensor_" +
      "proximity\030\t \001(\0132&.sensors_packet.SensorP" +
      "roximityPayload\0228\n\014sensor_light\030\n \001(\0132\"." +
      "sensors_packet.SensorLightPayload\022>\n\017sen" +
      "sor_pressure\030\013 \001(\0132%.sensors_packet.Sens" +
      "orPressurePayload\022O\n\030sensor_relative_hum",
      "idity\030\014 \001(\0132-.sensors_packet.SensorRelat" +
      "iveHumidityPayload\022/\n\007battery\030d \001(\0132\036.se" +
      "nsors_packet.BatteryPayload\022(\n\003gps\030\310\001 \001(" +
      "\0132\032.sensors_packet.GPSPayload\032=\n\032SensorA" +
      "ccelerometerPayload\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(" +
      "\001\022\t\n\001z\030\003 \001(\001\032<\n\031SensorMagnetometerPayloa" +
      "d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\032H\n\030Se" +
      "nsorOrientationPayload\022\017\n\007azimuth\030\001 \001(\001\022" +
      "\r\n\005pitch\030\002 \001(\001\022\014\n\004roll\030\003 \001(\001\032F\n\026SensorGy" +
      "roscopePayload\022\017\n\007azimuth\030\001 \001(\001\022\r\n\005pitch",
      "\030\002 \001(\001\022\014\n\004roll\030\003 \001(\001\0327\n\024SensorGravityPay" +
      "load\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\0329\n" +
      "\026SensorLinearAccPayload\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030" +
      "\002 \001(\001\022\t\n\001z\030\003 \001(\001\0328\n\026SensorRotVectorPaylo" +
      "ad\022\014\n\004size\030\001 \001(\r\022\020\n\004data\030\002 \003(\001B\002\020\001\032/\n\030Se" +
      "nsorTemperaturePayload\022\023\n\013temperature\030\001 " +
      "\001(\001\032*\n\026SensorProximityPayload\022\020\n\010distanc" +
      "e\030\001 \001(\001\032#\n\022SensorLightPayload\022\r\n\005light\030\001" +
      " \001(\001\032)\n\025SensorPressurePayload\022\020\n\010pressur" +
      "e\030\001 \001(\001\032:\n\035SensorRelativeHumidityPayload",
      "\022\031\n\021relative_humidity\030\001 \001(\001\032\200\002\n\016BatteryP" +
      "ayload\022\025\n\rbattery_level\030\001 \001(\004\022\024\n\014battery" +
      "_full\030\002 \001(\004\022R\n\016battery_status\030\003 \001(\01620.se" +
      "nsors_packet.BatteryPayload.BatteryStatu" +
      "sType:\010CHARGING\022\021\n\tac_online\030\004 \001(\r\"Z\n\021Ba" +
      "tteryStatusType\022\014\n\010CHARGING\020\000\022\017\n\013DISCHAR" +
      "GING\020\002\022\017\n\013NOTCHARGING\020\003\022\010\n\004FULL\020\004\022\013\n\007UNK" +
      "NOWN\020\005\032\303\001\n\nGPSPayload\022A\n\006status\030\001 \001(\0162(." +
      "sensors_packet.GPSPayload.GPSStatusType:" +
      "\007ENABLED\022\020\n\010latitude\030\002 \001(\001\022\021\n\tlongitude\030",
      "\003 \001(\001\022\020\n\010altitude\030\004 \001(\001\022\017\n\007bearing\030\005 \001(\001" +
      "\"*\n\rGPSStatusType\022\014\n\010DISABLED\020\000\022\013\n\007ENABL" +
      "ED\020\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_sensors_packet_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_sensors_packet_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sensors_packet_descriptor,
              new java.lang.String[] { "SensorAccelerometer", "SensorMagnetometer", "SensorOrientation", "SensorGyroscope", "SensorGravity", "SensorLinearAcc", "SensorRotVector", "SensorTemperature", "SensorProximity", "SensorLight", "SensorPressure", "SensorRelativeHumidity", "Battery", "Gps", },
              SensorsPacket.sensors_packet.class,
              SensorsPacket.sensors_packet.Builder.class);
          internal_static_sensors_packet_SensorAccelerometerPayload_descriptor =
            internal_static_sensors_packet_descriptor.getNestedTypes().get(0);
          internal_static_sensors_packet_SensorAccelerometerPayload_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sensors_packet_SensorAccelerometerPayload_descriptor,
              new java.lang.String[] { "X", "Y", "Z", },
              SensorsPacket.sensors_packet.SensorAccelerometerPayload.class,
              SensorsPacket.sensors_packet.SensorAccelerometerPayload.Builder.class);
          internal_static_sensors_packet_SensorMagnetometerPayload_descriptor =
            internal_static_sensors_packet_descriptor.getNestedTypes().get(1);
          internal_static_sensors_packet_SensorMagnetometerPayload_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sensors_packet_SensorMagnetometerPayload_descriptor,
              new java.lang.String[] { "X", "Y", "Z", },
              SensorsPacket.sensors_packet.SensorMagnetometerPayload.class,
              SensorsPacket.sensors_packet.SensorMagnetometerPayload.Builder.class);
          internal_static_sensors_packet_SensorOrientationPayload_descriptor =
            internal_static_sensors_packet_descriptor.getNestedTypes().get(2);
          internal_static_sensors_packet_SensorOrientationPayload_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sensors_packet_SensorOrientationPayload_descriptor,
              new java.lang.String[] { "Azimuth", "Pitch", "Roll", },
              SensorsPacket.sensors_packet.SensorOrientationPayload.class,
              SensorsPacket.sensors_packet.SensorOrientationPayload.Builder.class);
          internal_static_sensors_packet_SensorGyroscopePayload_descriptor =
            internal_static_sensors_packet_descriptor.getNestedTypes().get(3);
          internal_static_sensors_packet_SensorGyroscopePayload_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sensors_packet_SensorGyroscopePayload_descriptor,
              new java.lang.String[] { "Azimuth", "Pitch", "Roll", },
              SensorsPacket.sensors_packet.SensorGyroscopePayload.class,
              SensorsPacket.sensors_packet.SensorGyroscopePayload.Builder.class);
          internal_static_sensors_packet_SensorGravityPayload_descriptor =
            internal_static_sensors_packet_descriptor.getNestedTypes().get(4);
          internal_static_sensors_packet_SensorGravityPayload_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sensors_packet_SensorGravityPayload_descriptor,
              new java.lang.String[] { "X", "Y", "Z", },
              SensorsPacket.sensors_packet.SensorGravityPayload.class,
              SensorsPacket.sensors_packet.SensorGravityPayload.Builder.class);
          internal_static_sensors_packet_SensorLinearAccPayload_descriptor =
            internal_static_sensors_packet_descriptor.getNestedTypes().get(5);
          internal_static_sensors_packet_SensorLinearAccPayload_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sensors_packet_SensorLinearAccPayload_descriptor,
              new java.lang.String[] { "X", "Y", "Z", },
              SensorsPacket.sensors_packet.SensorLinearAccPayload.class,
              SensorsPacket.sensors_packet.SensorLinearAccPayload.Builder.class);
          internal_static_sensors_packet_SensorRotVectorPayload_descriptor =
            internal_static_sensors_packet_descriptor.getNestedTypes().get(6);
          internal_static_sensors_packet_SensorRotVectorPayload_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sensors_packet_SensorRotVectorPayload_descriptor,
              new java.lang.String[] { "Size", "Data", },
              SensorsPacket.sensors_packet.SensorRotVectorPayload.class,
              SensorsPacket.sensors_packet.SensorRotVectorPayload.Builder.class);
          internal_static_sensors_packet_SensorTemperaturePayload_descriptor =
            internal_static_sensors_packet_descriptor.getNestedTypes().get(7);
          internal_static_sensors_packet_SensorTemperaturePayload_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sensors_packet_SensorTemperaturePayload_descriptor,
              new java.lang.String[] { "Temperature", },
              SensorsPacket.sensors_packet.SensorTemperaturePayload.class,
              SensorsPacket.sensors_packet.SensorTemperaturePayload.Builder.class);
          internal_static_sensors_packet_SensorProximityPayload_descriptor =
            internal_static_sensors_packet_descriptor.getNestedTypes().get(8);
          internal_static_sensors_packet_SensorProximityPayload_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sensors_packet_SensorProximityPayload_descriptor,
              new java.lang.String[] { "Distance", },
              SensorsPacket.sensors_packet.SensorProximityPayload.class,
              SensorsPacket.sensors_packet.SensorProximityPayload.Builder.class);
          internal_static_sensors_packet_SensorLightPayload_descriptor =
            internal_static_sensors_packet_descriptor.getNestedTypes().get(9);
          internal_static_sensors_packet_SensorLightPayload_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sensors_packet_SensorLightPayload_descriptor,
              new java.lang.String[] { "Light", },
              SensorsPacket.sensors_packet.SensorLightPayload.class,
              SensorsPacket.sensors_packet.SensorLightPayload.Builder.class);
          internal_static_sensors_packet_SensorPressurePayload_descriptor =
            internal_static_sensors_packet_descriptor.getNestedTypes().get(10);
          internal_static_sensors_packet_SensorPressurePayload_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sensors_packet_SensorPressurePayload_descriptor,
              new java.lang.String[] { "Pressure", },
              SensorsPacket.sensors_packet.SensorPressurePayload.class,
              SensorsPacket.sensors_packet.SensorPressurePayload.Builder.class);
          internal_static_sensors_packet_SensorRelativeHumidityPayload_descriptor =
            internal_static_sensors_packet_descriptor.getNestedTypes().get(11);
          internal_static_sensors_packet_SensorRelativeHumidityPayload_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sensors_packet_SensorRelativeHumidityPayload_descriptor,
              new java.lang.String[] { "RelativeHumidity", },
              SensorsPacket.sensors_packet.SensorRelativeHumidityPayload.class,
              SensorsPacket.sensors_packet.SensorRelativeHumidityPayload.Builder.class);
          internal_static_sensors_packet_BatteryPayload_descriptor =
            internal_static_sensors_packet_descriptor.getNestedTypes().get(12);
          internal_static_sensors_packet_BatteryPayload_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sensors_packet_BatteryPayload_descriptor,
              new java.lang.String[] { "BatteryLevel", "BatteryFull", "BatteryStatus", "AcOnline", },
              SensorsPacket.sensors_packet.BatteryPayload.class,
              SensorsPacket.sensors_packet.BatteryPayload.Builder.class);
          internal_static_sensors_packet_GPSPayload_descriptor =
            internal_static_sensors_packet_descriptor.getNestedTypes().get(13);
          internal_static_sensors_packet_GPSPayload_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sensors_packet_GPSPayload_descriptor,
              new java.lang.String[] { "Status", "Latitude", "Longitude", "Altitude", "Bearing", },
              SensorsPacket.sensors_packet.GPSPayload.class,
              SensorsPacket.sensors_packet.GPSPayload.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
