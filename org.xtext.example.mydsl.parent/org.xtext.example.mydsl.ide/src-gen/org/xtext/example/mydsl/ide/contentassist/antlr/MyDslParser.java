/*
 * generated by Xtext 2.9.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives_1(), "rule__Model__Alternatives_1");
					put(grammarAccess.getEnginesAccess().getAlternatives(), "rule__Engines__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getIncludesAccess().getGroup(), "rule__Includes__Group__0");
					put(grammarAccess.getPlaneAccess().getGroup(), "rule__Plane__Group__0");
					put(grammarAccess.getPlaneAccess().getGroup_3_0(), "rule__Plane__Group_3_0__0");
					put(grammarAccess.getPlaneAccess().getGroup_3_1(), "rule__Plane__Group_3_1__0");
					put(grammarAccess.getAirportAccess().getGroup(), "rule__Airport__Group__0");
					put(grammarAccess.getAirportAccess().getGroup_3_0(), "rule__Airport__Group_3_0__0");
					put(grammarAccess.getAirportAccess().getGroup_3_1(), "rule__Airport__Group_3_1__0");
					put(grammarAccess.getAirportAccess().getGroup_3_2(), "rule__Airport__Group_3_2__0");
					put(grammarAccess.getAirlineAccess().getGroup(), "rule__Airline__Group__0");
					put(grammarAccess.getAirlineAccess().getGroup_3_0(), "rule__Airline__Group_3_0__0");
					put(grammarAccess.getAirlineAccess().getGroup_3_1(), "rule__Airline__Group_3_1__0");
					put(grammarAccess.getAirlineAccess().getGroup_3_2(), "rule__Airline__Group_3_2__0");
					put(grammarAccess.getAirlineAccess().getGroup_3_3(), "rule__Airline__Group_3_3__0");
					put(grammarAccess.getAirlineAccess().getGroup_3_4(), "rule__Airline__Group_3_4__0");
					put(grammarAccess.getModelAccess().getIncludesAssignment_0(), "rule__Model__IncludesAssignment_0");
					put(grammarAccess.getModelAccess().getPlanesAssignment_1_0(), "rule__Model__PlanesAssignment_1_0");
					put(grammarAccess.getModelAccess().getAirportsAssignment_1_1(), "rule__Model__AirportsAssignment_1_1");
					put(grammarAccess.getModelAccess().getAirlinesAssignment_2(), "rule__Model__AirlinesAssignment_2");
					put(grammarAccess.getIncludesAccess().getImportURIAssignment_2(), "rule__Includes__ImportURIAssignment_2");
					put(grammarAccess.getPlaneAccess().getNameAssignment_1(), "rule__Plane__NameAssignment_1");
					put(grammarAccess.getPlaneAccess().getPassengersAssignment_3_0_2(), "rule__Plane__PassengersAssignment_3_0_2");
					put(grammarAccess.getPlaneAccess().getMotorisationAssignment_3_1_2(), "rule__Plane__MotorisationAssignment_3_1_2");
					put(grammarAccess.getAirportAccess().getTitleAssignment_1(), "rule__Airport__TitleAssignment_1");
					put(grammarAccess.getAirportAccess().getNameAssignment_3_0_2(), "rule__Airport__NameAssignment_3_0_2");
					put(grammarAccess.getAirportAccess().getCountryAssignment_3_1_2(), "rule__Airport__CountryAssignment_3_1_2");
					put(grammarAccess.getAirportAccess().getRunwaysAssignment_3_2_2(), "rule__Airport__RunwaysAssignment_3_2_2");
					put(grammarAccess.getAirlineAccess().getNameAssignment_1(), "rule__Airline__NameAssignment_1");
					put(grammarAccess.getAirlineAccess().getPlaneAssignment_3_0_2(), "rule__Airline__PlaneAssignment_3_0_2");
					put(grammarAccess.getAirlineAccess().getCompanyAssignment_3_1_2(), "rule__Airline__CompanyAssignment_3_1_2");
					put(grammarAccess.getAirlineAccess().getDepartureAssignment_3_2_2(), "rule__Airline__DepartureAssignment_3_2_2");
					put(grammarAccess.getAirlineAccess().getArrivalAssignment_3_3_2(), "rule__Airline__ArrivalAssignment_3_3_2");
					put(grammarAccess.getAirlineAccess().getDurationAssignment_3_4_2(), "rule__Airline__DurationAssignment_3_4_2");
					put(grammarAccess.getAirlineAccess().getRegularAssignment_3_5(), "rule__Airline__RegularAssignment_3_5");
					put(grammarAccess.getCodeOACIAccess().getNameAssignment(), "rule__CodeOACI__NameAssignment");
					put(grammarAccess.getPlaneAccess().getUnorderedGroup_3(), "rule__Plane__UnorderedGroup_3");
					put(grammarAccess.getAirportAccess().getUnorderedGroup_3(), "rule__Airport__UnorderedGroup_3");
					put(grammarAccess.getAirlineAccess().getUnorderedGroup_3(), "rule__Airline__UnorderedGroup_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMyDslParser typedParser = (InternalMyDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
