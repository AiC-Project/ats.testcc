/*
 * generated by Xtext 2.9.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Airline;
import org.xtext.example.mydsl.myDsl.Airport;
import org.xtext.example.mydsl.myDsl.CodeOACI;
import org.xtext.example.mydsl.myDsl.Includes;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Plane;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.AIRLINE:
				sequence_Airline(context, (Airline) semanticObject); 
				return; 
			case MyDslPackage.AIRPORT:
				sequence_Airport(context, (Airport) semanticObject); 
				return; 
			case MyDslPackage.CODE_OACI:
				sequence_CodeOACI(context, (CodeOACI) semanticObject); 
				return; 
			case MyDslPackage.INCLUDES:
				sequence_Includes(context, (Includes) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.PLANE:
				sequence_Plane(context, (Plane) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Airline returns Airline
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         (
	 *             plane=[Plane|ID] | 
	 *             company=STRING | 
	 *             departure=[CodeOACI|OACI] | 
	 *             arrival=[CodeOACI|OACI] | 
	 *             duration=DURATION | 
	 *             regular?='REGULIERE;'
	 *         )*
	 *     )
	 */
	protected void sequence_Airline(ISerializationContext context, Airline semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Airport returns Airport
	 *
	 * Constraint:
	 *     (title=STRING (name=CodeOACI | country=STRING | runways=INT)+)
	 */
	protected void sequence_Airport(ISerializationContext context, Airport semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CodeOACI returns CodeOACI
	 *
	 * Constraint:
	 *     name=OACI
	 */
	protected void sequence_CodeOACI(ISerializationContext context, CodeOACI semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CODE_OACI__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CODE_OACI__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodeOACIAccess().getNameOACITerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Includes returns Includes
	 *
	 * Constraint:
	 *     importURI=INCLUDE
	 */
	protected void sequence_Includes(ISerializationContext context, Includes semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INCLUDES__IMPORT_URI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INCLUDES__IMPORT_URI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIncludesAccess().getImportURIINCLUDETerminalRuleCall_2_0(), semanticObject.getImportURI());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     ((includes+=Includes* (planes+=Plane | airports+=Airport)+ airlines+=Airline+) | (includes+=Includes* airlines+=Airline+) | airlines+=Airline+)?
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Plane returns Plane
	 *
	 * Constraint:
	 *     (name=ID (passengers=INT | motorisation=Engines)+)
	 */
	protected void sequence_Plane(ISerializationContext context, Plane semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
