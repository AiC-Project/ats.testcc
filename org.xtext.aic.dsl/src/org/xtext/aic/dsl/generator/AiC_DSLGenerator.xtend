/*
 * generated by Xtext 2.9.0
 */
package org.xtext.aic.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.aic.dsl.aiC_DSL.Sensor

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class AiC_DSLGenerator extends AbstractGenerator {
	String head = "package com.zenika.aic.demo.sensor;
	
	import android.hardware.Sensor;
	import android.support.test.InstrumentationRegistry;
	import android.support.test.runner.AndroidJUnit4;
	import android.test.InstrumentationTestCase;
	import android.util.Log;
	
	import com.zenika.aic.core.libs.sensor.Device;
	import com.zenika.aic.core.libs.sensor.SensorsPacket;
	import org.junit.Test;
	import org.junit.runner.RunWith;
	import org.junit.Before;
	
	@RunWith(AndroidJUnit4.class)
	public class Testing extends InstrumentationTestCase {
	
		private Device device;
		private String appName = \"Sensor\";
		private String packageName = \"aic.zenika.com.sensor\";
	
	
	    @Before
	    public void init() {
	        device = new Device(appName, packageName, InstrumentationRegistry.getInstrumentation());
	}
	@Test
    public void test() {device.setValuesForSensor(new float[]{
	"
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
			fsa.generateFile('Testing.java', head + 
			resource.allContents
			.filter(typeof(Sensor))
			.map[value] + 'f},Sensor.' + resource.allContents
			.filter(typeof(Sensor))
			.map[name] + ');}
			}')
	}
}
